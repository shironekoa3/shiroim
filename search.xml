<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PC端那些好用的工具</title>
      <link href="article/25/"/>
      <url>article/25/</url>
      
        <content type="html"><![CDATA[<h1 id="1-AIDA64"><a href="#1-AIDA64" class="headerlink" title="1.AIDA64"></a>1.AIDA64</h1><p><code>AIDA64</code> 查看系统信息的工具，非常全面。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/AIDA-Extreme.png" alt="AIDA Extreme"></p><h1 id="2-CCleaner-垃圾清理"><a href="#2-CCleaner-垃圾清理" class="headerlink" title="2.CCleaner(垃圾清理)"></a>2.CCleaner(垃圾清理)</h1><p><code>CCleaner</code> 一款好用的系统垃圾清理工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/CCleaner.png" alt="CCleaner"></p><h1 id="3-CleverPDF-PDF工具"><a href="#3-CleverPDF-PDF工具" class="headerlink" title="3.CleverPDF(PDF工具)"></a>3.CleverPDF(PDF工具)</h1><p><code>CleverPDF</code> 一款强大的 PDF 工具，格式转换，修改 PDF 等。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/CleverPDF.png" alt="CleverPDF"></p><h1 id="4-CurrPorts"><a href="#4-CurrPorts" class="headerlink" title="4.CurrPorts"></a>4.CurrPorts</h1><p><code>CurrPorts</code> 可以查看所有进程的网络连接情况。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/CurrPorts.png" alt="CurrPorts"></p><h1 id="5-DuplicatePhotoFinder-图片查重"><a href="#5-DuplicatePhotoFinder-图片查重" class="headerlink" title="5.DuplicatePhotoFinder(图片查重)"></a>5.DuplicatePhotoFinder(图片查重)</h1><p><code>DuplicatePhotoFinder</code> 图片查重工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/DuplicatePhotoFinder.png" alt="DuplicatePhotoFinder"></p><h1 id="6-FormatFactory-格式工厂"><a href="#6-FormatFactory-格式工厂" class="headerlink" title="6.FormatFactory(格式工厂)"></a>6.FormatFactory(格式工厂)</h1><p><code>FormatFactory</code> 媒体格式转换工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/FormatFactory.png" alt="FormatFactory"></p><h1 id="7-IDM-下载神器"><a href="#7-IDM-下载神器" class="headerlink" title="7.IDM(下载神器)"></a>7.IDM(下载神器)</h1><p><code>Internet Download Manager</code> 下载神器，装机必备。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Internet-Download-Manager.png" alt="Internet Download Manager"></p><h1 id="8-MKVToolNix-视频封装"><a href="#8-MKVToolNix-视频封装" class="headerlink" title="8.MKVToolNix(视频封装)"></a>8.MKVToolNix(视频封装)</h1><p><code>MKVToolNix</code> MKV 视频封装工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/MKVToolNix.png" alt="MKVToolNix"></p><h1 id="9-MobaXterm-SSH工具"><a href="#9-MobaXterm-SSH工具" class="headerlink" title="9.MobaXterm(SSH工具)"></a>9.MobaXterm(SSH工具)</h1><p><code>MobaXterm</code> 一款不错的 SSH 工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/MobaXterm.png" alt="MobaXterm"></p><h1 id="10-MusicTag-音频标签"><a href="#10-MusicTag-音频标签" class="headerlink" title="10.MusicTag(音频标签)"></a>10.MusicTag(音频标签)</h1><p><code>MusicTag</code> 批量给音频加封面 Tag 等。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/MusicTag.png" alt="MusicTag"></p><h1 id="11-QtScrcpy"><a href="#11-QtScrcpy" class="headerlink" title="11.QtScrcpy"></a>11.QtScrcpy</h1><p><code>QtScrcpy</code> 手机投屏到电脑。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/QtScrcpy.png" alt="QtScrcpy"></p><h1 id="12-ReNamer-文件重命名"><a href="#12-ReNamer-文件重命名" class="headerlink" title="12.ReNamer(文件重命名)"></a>12.ReNamer(文件重命名)</h1><p><code>ReNamer</code> 文件批量重命名工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/ReNamer.png" alt="ReNamer"></p><h1 id="13-Snipaste-截图工具"><a href="#13-Snipaste-截图工具" class="headerlink" title="13.Snipaste(截图工具)"></a>13.Snipaste(截图工具)</h1><p><code>Snipaste</code> 一款非常不错的截图工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Snipaste.png" alt="Snipaste"></p><h1 id="14-SrtEditPortable-字幕编辑"><a href="#14-SrtEditPortable-字幕编辑" class="headerlink" title="14.SrtEditPortable(字幕编辑)"></a>14.SrtEditPortable(字幕编辑)</h1><p><code>SrtEditPortable</code> 字幕编辑工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/SrtEditPortable.png" alt="SrtEditPortable"></p><h1 id="15-UninstallTool-卸载工具"><a href="#15-UninstallTool-卸载工具" class="headerlink" title="15.UninstallTool(卸载工具)"></a>15.UninstallTool(卸载工具)</h1><p><code>UninstallTool</code> 卸载工具，可以清除残留。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/UninstallTool.png" alt="UninstallTool"></p><h1 id="16-Process-Monitor"><a href="#16-Process-Monitor" class="headerlink" title="16.Process Monitor"></a>16.Process Monitor</h1><p><code>Process Monitor</code> 监控进程的所有操作。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Process-Monitor.png" alt="Process Monitor"></p><h1 id="17-ScreenToGif-GIF录制"><a href="#17-ScreenToGif-GIF录制" class="headerlink" title="17.ScreenToGif(GIF录制)"></a>17.ScreenToGif(GIF录制)</h1><p><code>ScreenToGif</code> 录制 GIF 的工具，可以编辑帧。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/ScreenToGif.png" alt="ScreenToGif"></p><h1 id="18-Winformation"><a href="#18-Winformation" class="headerlink" title="18.Winformation"></a>18.Winformation</h1><p><code>Winformation</code> 查看窗口的信息。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Winformation.png" alt="Winformation"></p><h1 id="19-Bandicam-录屏工具"><a href="#19-Bandicam-录屏工具" class="headerlink" title="19.Bandicam(录屏工具)"></a>19.Bandicam(录屏工具)</h1><p><code>Bandicam</code> 知名录屏工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Bandicam.png" alt="Bandicam"></p><h1 id="20-Fastlink-远控工具"><a href="#20-Fastlink-远控工具" class="headerlink" title="20.Fastlink(远控工具)"></a>20.Fastlink(远控工具)</h1><p><code>Fastlink</code> 远控软件，可以远程打游戏，这不比向日葵好用？(2021)。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/Fastlink.png" alt="Fastlink"></p><h1 id="21-MarukoToolbox-小丸工具箱"><a href="#21-MarukoToolbox-小丸工具箱" class="headerlink" title="21.MarukoToolbox(小丸工具箱)"></a>21.MarukoToolbox(小丸工具箱)</h1><p><code>MarukoToolbox</code> 小丸工具箱，非常好用的视频压制工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/MarukoToolbox.png" alt="MarukoToolbox"></p><h1 id="21-PotPlayer-本地播放器"><a href="#21-PotPlayer-本地播放器" class="headerlink" title="21.PotPlayer(本地播放器)"></a>21.PotPlayer(本地播放器)</h1><p><code>PotPlayer</code> 非常好用的视频播放器，装机必备。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/PotPlayer.png" alt="PotPlayer"></p><h1 id="22-qBittorrent-BT下载"><a href="#22-qBittorrent-BT下载" class="headerlink" title="22.qBittorrent(BT下载)"></a>22.qBittorrent(BT下载)</h1><p><code>qBittorrent</code> BT 下载工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/qBittorrent.png" alt="qBittorrent"></p><h1 id="23-VoiceRecorder-录音工具"><a href="#23-VoiceRecorder-录音工具" class="headerlink" title="23.VoiceRecorder(录音工具)"></a>23.VoiceRecorder(录音工具)</h1><p><code>VoiceRecorder</code> 非常轻量的录音工具。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/VoiceRecorder.png" alt="VoiceRecorder"></p><h1 id="24-TrafficMonitor-流量监控"><a href="#24-TrafficMonitor-流量监控" class="headerlink" title="24.TrafficMonitor(流量监控)"></a>24.TrafficMonitor(流量监控)</h1><p><code>TrafficMonitor</code> 可以实时监控流量、CPU、内存占用情况。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/tools-capture/TrafficMonitor.png" alt="TrafficMonitor"></p><p>[持续更新中……]</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何访问外网</title>
      <link href="article/24/"/>
      <url>article/24/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Google、YouTube 等网站无法访问，是因为大陆的运营商防火墙拦截掉了你的访问请求，也就是说只要是使用的大陆的运营商网络，都是无法访问这些网站的。解决方法其实也很简单，就是使用网络代理。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/unproxy.png" alt="不使用代理"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/proxy.png" alt="使用代理"></p><p>通过上面的图片可以知道，访问外网需要如下工具：</p><ol><li>能访问外网的服务器一台。</li><li>服务器安装相关程序转发客服端的流量。</li><li>客户端安装相关程序连接服务器。</li></ol><p>不过如果是一般用户，也没有必要自己去购买一台服务器来搭建相关程序。</p><p>因为运营商会检测你访问的服务器是否提供了这样的程序，一旦被检测出服务器上安装了相关程序，运营商也会将这个服务器的 IP 地址拉黑，这样就无法连接这个服务器了。</p><p>因而催生出了这样一个产业，平台老板会购买多台服务器专门用来做代理，用户可以购买套餐来使用平台的代理，这样就算一台服务器被拉黑，也会有其他的服务器可以使用，这样的平台就叫机场。</p><p>一般在机场购买套餐之后，机场会提供一个订阅链接，在客户端打开软件填入订阅链接，就会自动下载各个代理服务器的配置，选择一个代理服务器之后开启代理，就可以访问外网了。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>比较常用的有如下工具：</p><p><strong>Windows</strong>：<br>Clash for Windows: <a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a><br>Netch: <a href="https://github.com/netchx/Netch/releases">https://github.com/netchx/Netch/releases</a><br>v2rayN: <a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></p><p><strong>安卓</strong>：<br>ClashForAndroid: <a href="https://github.com/Kr328/ClashForAndroid/releases">https://github.com/Kr328/ClashForAndroid/releases</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>教程以 <code>Clash for Windows</code> 为例。</p><ol><li><p>下载安装 <code>Clash for Windows</code>。</p></li><li><p>打开软件进入 <code>Profiles</code> 选项卡，在文本框内粘贴机场的订阅链接，点击 <code>Download</code> 按钮下载配置文件。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/cfw1.png" alt="Clash for Windows"></p></li><li><p>进入 <code>Proxies</code> 选项卡，选择一个节点。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/cfw2.png" alt="Clash for Windows"></p></li><li><p>进入 <code>General</code> 选项卡，打开 <code>System Proxy</code> 选项，即可开启代理。<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/cfw3.png" alt="Clash for Windows"></p></li><li><p>打开浏览器，访问 <a href="https://www.google.com/">https://www.google.com/</a> 检查是否能成功访问被封禁的网站。</p></li></ol><p>其他软件操作流程也基本类似，喜欢用什么就用什么。</p><p>[END]</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四级英语作文写作技巧</title>
      <link href="article/23/"/>
      <url>article/23/</url>
      
        <content type="html"><![CDATA[<h2 id="四六级英语常见题型"><a href="#四六级英语常见题型" class="headerlink" title="四六级英语常见题型"></a>四六级英语常见题型</h2><blockquote><p><strong>论说文、谚语警句、书信、图画图表。</strong></p></blockquote><h2 id="写作翻译原则"><a href="#写作翻译原则" class="headerlink" title="写作翻译原则"></a>写作翻译原则</h2><blockquote><p><strong>保底</strong>：确保单词和语法正确。<br><strong>高分</strong>：单词语法准确多变、句子之间多用逻辑关系词。</p></blockquote><h2 id="写作常见土单词替换词"><a href="#写作常见土单词替换词" class="headerlink" title="写作常见土单词替换词"></a>写作常见土单词替换词</h2><h3 id="think"><a href="#think" class="headerlink" title="think"></a>think</h3><blockquote><p>have been convinced that …<br>be of the opinion that …<br>cling to the perspective that …<br>maintain, contend, assert, argue, assume, claim</p></blockquote><h3 id="many"><a href="#many" class="headerlink" title="many"></a>many</h3><blockquote><p>a sea of …<br>multitudes of …<br>immense amounts of …<br>numerous, innumerable, plentiful</p></blockquote><h3 id="people-we-us"><a href="#people-we-us" class="headerlink" title="people we us"></a>people we us</h3><blockquote><p>private individuals<br>youngsters and teenagers<br>all children and adults<br>experts and professors<br>parents kids offspring<br>businessman<br>youngsters on campus</p></blockquote><h3 id="very"><a href="#very" class="headerlink" title="very"></a>very</h3><blockquote><p>more than<br>exceedingly, distinctly, strikingly<br>extraordinarily, outstandingly</p></blockquote><h3 id="important"><a href="#important" class="headerlink" title="important"></a>important</h3><blockquote><p>play a crucial role in …<br>significant, crucial, critical, indispensable</p></blockquote><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><blockquote><p>at the same time<br>in the meanwhile<br>similarly, likewise, equally</p></blockquote><h3 id="but"><a href="#but" class="headerlink" title="but"></a>but</h3><blockquote><p>on the contrary<br>by contrast<br>nevertheless, conversely</p></blockquote><h3 id="so"><a href="#so" class="headerlink" title="so"></a>so</h3><blockquote><p>as a result<br>therefore, consequently</p></blockquote><h3 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h3><blockquote><p>in addition<br>besides, furthermore, moreover</p></blockquote><h2 id="写作中可用的万能句型"><a href="#写作中可用的万能句型" class="headerlink" title="写作中可用的万能句型"></a>写作中可用的万能句型</h2><h3 id="主语从句"><a href="#主语从句" class="headerlink" title="主语从句"></a>主语从句</h3><blockquote><p>It proves self-evident that …                显而易见众所周知…<br>It has been found that …                    显而易见众所周知…<br>It seems beyond dispute that …                显而易见众所周知…<br>It seems universally acknowledged that …    显而易见众所周知…<br>It has been widely accepted that …            它已经被大众所接受….<br>It becomes generally agreed that …            一般都被同意了…<br>It keeps my argument that …                    我认为…</p></blockquote><h3 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h3><p>He is a lady killer,</p><blockquote><p>which is really beyond disputy.                显而易见的<br>which has been widely accepted.<br>which has provoked the public’s widespread concern.</p></blockquote><h3 id="万能状语"><a href="#万能状语" class="headerlink" title="万能状语"></a>万能状语</h3><blockquote><p>as every one can see it            显而易见众所周知<br>with the rapid advance of science and technology    随着科学和技术的快速进步<br>in our contemporary society        目前，现在(nowadays)<br>in the general routine of everyday living    在日常生活中</p></blockquote><h3 id="插入语"><a href="#插入语" class="headerlink" title="插入语"></a>插入语</h3><p>放在段首句的主谓之间。</p><blockquote><p>to be frank                坦白说<br>needless to say            显而易见<br>in my judgment            就我而言<br>from my perspective        就我而言<br>to tell the truth            实际上事实上<br>as a matter of fact        实际上事实上</p></blockquote><h3 id="强调句"><a href="#强调句" class="headerlink" title="强调句"></a>强调句</h3><p>段首句段尾句，只用一次。</p><blockquote><p>It is/was … that<br>I met a crazy dog in the street yesterday.<br>It was yesterday that I met a crazy dog in the street.</p></blockquote><h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h2><h3 id="谚语警句类"><a href="#谚语警句类" class="headerlink" title="谚语警句类"></a>谚语警句类</h3><p><strong>第一段：引出主题 + 解释你对这句话的理解。</strong></p><blockquote><ol><li>Nowadays, there remains an increasing interest in the topic about…</li><li>Recently the issue of … has been in the limelight/brought into focus.</li><li>What is your idea as to the topic about …? It is my belief that ….</li><li>The meaning of the saying seems that …</li></ol></blockquote><p><strong>第二段：举例说明。</strong></p><blockquote><ol><li>Although so abundant cases can support my simple view, the following one is the most favorable.</li><li>Examples to prove the view are abundant. The most persuasive one is the case of sb.</li><li>Such impressive cases/stories are not rare in our daily life, yet the following one is definitely typical.</li></ol></blockquote><p><strong>第三段：总结。</strong></p><blockquote><ol><li>Under no circumstances can we fail to pour attention into the improtance/seriousness of the fact that…</li><li>It is really high time that due attention could not have failed to be paid to the issue.</li><li>So curcial/grave is sth. that it should have caused our attention.</li><li>It is the fact of sth. that really has a great influence on our study and life.</li><li>Parents are supposed to spend more time educating their kids to do sth.</li><li>Awareness about sth could be cultivated to make ourselves lead a healthy and favorable life.</li></ol></blockquote><p><strong>最后一句：喊口号。</strong></p><blockquote><ol><li>Only by taking these actions can people have a more brilliant and glorious future.</li><li>So shouldn’t human beings pay much attention to the meaningful saying/problem?</li><li>So under no account could people divert attention from ??</li><li>The more actively people face the issue, the more happies ?? their life.</li></ol></blockquote><h3 id="图画图表作文"><a href="#图画图表作文" class="headerlink" title="图画图表作文"></a>图画图表作文</h3><p><strong>第一段：一二句主语从句引出描述图画或图表，第三句总结图画中心思想。</strong></p><blockquote><ol><li>It seems beyond dispute that in the vivid cartoon/chart …</li><li>A son is telling his father that he is … while hsi father is saying that …</li><li>Simple as the cartoon looks, its meaning behind is really so far-reaching.</li><li>If you desire to do something great, you have to do it from small things.</li></ol></blockquote><p><strong>第二段： 原因分析或举例。</strong></p><blockquote><ol><li>The majority of people would agree that sth has caused serious problems.</li><li>It is superficially a simple phenomenon, but when subjected to analysis, it has its fundamental reasons.</li></ol></blockquote><p><strong>第三段：采取措施：同谚语警告型。</strong></p><h3 id="论说文"><a href="#论说文" class="headerlink" title="论说文"></a>论说文</h3><p><strong>第一段：引出主题 + 个人观点。</strong><br><strong>第二段：原因分析或举例。</strong><br><strong>第三段：采取措施：同谚语警告型。</strong></p><h3 id="书信作文"><a href="#书信作文" class="headerlink" title="书信作文"></a>书信作文</h3><p><strong>自我介绍 + 写作目的</strong></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 清理桌面图标</title>
      <link href="article/22/"/>
      <url>article/22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章转载自 <a href="https://blog.csdn.net/luoyayun361/article/details/79228390">https://blog.csdn.net/luoyayun361/article/details/79228390</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Windows 系统磁盘中存放的图标会自动缓存，有时候替换一个新的图标过后，并不会立马看到新图标，这就是因为加载的还是前一个图标的缓存文件，这时候点击右键刷新时没用的，有个比较笨的办法是重启电脑，这样可以重新加载，但是比较麻烦，在网上找到一种比较简单的方式，将命令行做成一个脚本，只要双击脚本就能解决啦。还能解决桌面图标变白的问题。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>新建一个文本文档，然后将文件名改成 <code>.bat</code> 格式，如 <code>ClearIconCache.bat</code>，自动变成脚本文件，然后用记事本打开该文档，将以下所有内容拷贝到文档中保存并关闭，双击该文件即可完成自动清理。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="comment">rem 关闭Windows外壳程序explorer</span></span><br><span class="line"><span class="built_in">taskkill</span> /f /im explorer.exe</span><br><span class="line"><span class="comment">rem 清理系统图标缓存数据库</span></span><br><span class="line"><span class="built_in">attrib</span> -h -s -r &quot;<span class="variable">%userprofile%</span>\AppData\Local\IconCache.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\IconCache.db&quot;</span><br><span class="line"><span class="built_in">attrib</span> /s /d -h -s -r &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\*&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_32.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_96.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_102.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_256.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_1024.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_idx.db&quot;</span><br><span class="line"><span class="built_in">del</span> /f &quot;<span class="variable">%userprofile%</span>\AppData\Local\Microsoft\Windows\Explorer\thumbcache_sr.db&quot;</span><br><span class="line"><span class="comment">rem 清理 系统托盘记忆的图标</span></span><br><span class="line"><span class="built_in">echo</span> y|reg delete &quot;HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify&quot; /v IconStreams</span><br><span class="line"><span class="built_in">echo</span> y|reg delete &quot;HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify&quot; /v PastIconsStream</span><br><span class="line"><span class="comment">rem 重启Windows外壳程序explorer</span></span><br><span class="line"><span class="built_in">start</span> explorer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言学习笔记</title>
      <link href="article/21/"/>
      <url>article/21/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本书参考自谭浩强的《C程序设计(第四版)》</p></blockquote><h1 id="C-语言程序的结构特点"><a href="#C-语言程序的结构特点" class="headerlink" title="C 语言程序的结构特点"></a>C 语言程序的结构特点</h1><ol><li>一个程序由一个或多个源程序文件组成。一个源程序文件中可以包括<code>预处理指令</code>、<code>全局声明</code>、<code>函数定义</code>三个部分。</li><li><code>函数</code>是 C 程序的主要组成部分。</li><li>一个函数包括两个部分：<code>函数首部</code>和<code>函数体</code>。</li><li>程序总是从 <code>main</code> 函数开始执行的。</li><li>程序中对计算机的操作是由函数中的 C 语句完成的。</li><li>C 语言本身不提供输入输出语句。</li><li>C 语言程序开发步骤：<code>预处理</code>-&gt;<code>编译</code>-&gt;<code>链接</code>-&gt;<code>运行</code>，文件生成：<code>源文件</code>-&gt;<code>目标文件</code>-&gt;<code>可执行文件</code>。</li><li><code>&quot;\&quot;</code> + 3位数字如 <code>&quot;\101&quot;</code> 表示八进制数 101 的 ASCII 字符，即 <code>&#39;A&#39;</code>；<code>&quot;\x&quot;</code> + 2位数字如 <code>&quot;\x41&quot;</code> 表示十六进制 41 的 ASCII 字符，即 <code>&#39;A&#39;</code>；<code>&quot;\&quot;</code> + 2位数字如 <code>&quot;\99&quot;</code> 则直接输出 <code>99</code>。</li><li>在计算机高级语言中，用来对变量、符号常量名、函数、数组、类型等命名的有效字符序列统称为标识符。C 语言规定标识符只能由<code>字母</code>、<code>数字</code>和<code>下划线</code> 3 种字符组成，且第一个字符不能为数字。<code>C 语言大小写敏感</code>。</li><li>正数的补码为该数的二进制；负数的补码为该数的绝对值的补码按位取反再加 1。</li><li><code>float</code> 的有效数字为 6 位，<code>double</code> 的有效数字为 15 位，<code>long double</code> 的有效数字为 15 或 19 位(取决于占 8 字节还是 16 字节)。</li><li>两个整数相除的结果为整数，如 <code>5/3</code> 的结果是 <code>1</code>；但是如果除数和被除数中有一个负值，则舍入的方向是不固定的，多数系统采用<code>向零取整</code>的方法，即 <code>-5/3</code> 的值为 <code>-1</code>。</li><li><code>%</code> 运算符要求参加运算的对象为<code>整数</code>，结果也是整数。</li><li><code>a=b=c</code> 的赋值顺序是<code>从右到左</code>，先把 c 的值赋值给 b，再把 b 的值赋值给 a。</li><li>运算符两侧存在小数时，会将所有的数都转换成 <code>double</code> 型再计算。(然而实际上并不是)</li><li>一个表达式的最后加一个分号就成了一个语句。</li></ol><h1 id="选择结构程序设计"><a href="#选择结构程序设计" class="headerlink" title="选择结构程序设计"></a>选择结构程序设计</h1><ol><li>6 种关系运算符的优先级：<code>&lt;, &lt;=, &gt;, &gt;=</code> 的优先级高于 <code>==, !=</code>。</li><li>关系运算符的优先级低于算术运算符：<code>c &gt; a + b</code> 等效于 <code>c &gt; (a + b)</code>。</li><li>关系运算符的优先级高于赋值运算符：<code>a = b &gt; c</code> 等效于 <code>a = (b &gt; c)</code>。</li><li>逻辑运算符优先级：<code>!</code> &gt; <code>&amp;&amp;</code> &gt; <code>||</code>。</li><li>逻辑运算符中的 <code>&amp;&amp;</code> 和 <code>||</code> 优先级低于关系运算符：<code>a &gt; b &amp;&amp; x &gt; y</code>。</li><li>逻辑运算符中的 <code>!</code> 高于算术运算符。</li><li><code>switch</code> 后面括号内的表达式值类型应为<code>整数</code>类型(包括字符型)。</li><li><code>switch</code> 中如果 case 子句中没有 break 语句，将连续输出。</li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li>可变长数组不可指定为静态存储方式：<code>static int a[2*n]</code> 不合法。</li><li>二维数组的初始化方法：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分别赋值</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 写在一个括号内</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">// 可对部分元素赋初值</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>&#125;&#125;;<span class="comment">// 结果是 1 0 0 2 0 0</span></span><br><span class="line"><span class="comment">// 若对全部元素赋初值，则第 1 维的长度可不指定</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 若第 1 维长度不指定且不给全部初始值，则只初始化给定数据的行的值：</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">2</span>] = &#123;<span class="number">1</span>&#125;; <span class="comment">// 值为 1 0</span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">// 值为 1 2 3 0</span></span><br></pre></td></tr></table></figure></li><li>二维数组的第一维的值是一个地址。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">// a[1] 的值为一个地址 (0x00BBFD44)</span></span><br></pre></td></tr></table></figure></li><li>字符数组相关函数(需引入 <code>string.h</code> 头文件)：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcat</span>(dest, src);<span class="comment">// 将 src 的值拼接在 dest 后面，会自动去掉 dest 的 &quot;\0&quot;， 函数返回 dest 的地址。</span></span><br><span class="line"><span class="built_in">strcpy</span>(dest, src);<span class="comment">// 复制 src 的值到 dest 中，复制的字符数量为 src 的长度，包括 &quot;\0&quot;，dest 的剩余字符不会被修改。</span></span><br><span class="line"><span class="built_in">strncpy</span>(dest, src, maxlen);<span class="comment">// strcpy 的升级版，第三个参数为复制的字符数量，不包括 &quot;\0&quot;。</span></span><br><span class="line"><span class="built_in">strcmp</span>(s1 ,s2);<span class="comment">// 从左到右依次对比两个字符串的字符，直到出现不同或 &quot;\0&quot; 为止。完全相同返回 0；不相同时，若 s1 的字符 ASCII 码大，返回正数，反之返回负数。</span></span><br><span class="line"><span class="built_in">strlen</span>(s);<span class="comment">//返回字符串的实际长度，不包括 &quot;\0&quot;。</span></span><br><span class="line">strlwr(s);<span class="comment">//将字符串中的大写字母转换为小写字母。</span></span><br><span class="line">strupr(s);<span class="comment">//将字符串中的小写字母转换为大写字母。</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 (function)"></a>函数 (function)</h1><ol><li>函数在声明的时候可以不写形参名 <code>int test(int);</code>，也可以不写类型名 <code>int test(a);</code>。</li><li>函数的声明可以放在函数体内(作用域为当前函数)。</li><li>在定义和声明变量和函数时可以指定存储类别：<code>自动的(auto)</code>、<code>静态的(static)</code>、<code>寄存器的(register)</code>、<code>外部的(extern)</code>。</li><li>自动变量(auto)：函数中的局部变量，如果不专门声明为 static 存储类别，都是动态地分配存储空间的，数据存储在动态存储区中，函数结束时自动释放。</li><li>静态变量(static)：在静态存储区内分配存储单元，在程序整个运行期间都不释放，会自动初始化变量。</li><li>寄存器变量(register)：数据存放在寄存器中，存取速度远高于内存。编译系统会自动将频繁使用的变量放在寄存器中，实际使用的必要性并不大。</li><li>外部变量(extern)：函数外部定义的全局变量，作用域为从变量定义处开始到本程序文件末尾。用 extern 声明变量时类型名可以不写，如 <code>extern A</code>。提倡将外部变量定义放在引用它的所有函数之前，这样可以避免多加一个 extern 声明。</li><li>若需将变量作用域扩展到其他文件，可以在其他文件里使用 extern 来扩展其作用域。</li><li>外部变量放在静态存储区中；若用 static 修饰外部变量，则会限制于本文件访问，其他文件使用 extern 也无法访问。</li><li>内部函数(static)：只能被本文件中的其他函数所调用，也称为静态函数。</li><li>外部函数(extern)：如果在定义函数时不指定类别，默认为外部函数，可供其他文件调用(在文件中用 extern 声明函数)。</li></ol><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ol><li>指针 <code>+1</code> 时，实际增加的地址值取决于指针的类型字节数。</li><li>在编译时，对数组元素 <code>a[1]</code> 就是按 <code>*(a+1)</code> 来处理的。</li><li>两个指针指向同一个数组时，可以相减，结果为两个指针指向的元素之间的个数。</li><li><code>*</code> 与 <code>++</code> 同优先级，结合方向为<code>自右而左</code>。(<code>*p++</code> 等价于 <code>*(p++)</code>)</li><li>字符指针变量指向的字符串常量中的内容是不可被改变的。(<code>char* s = &quot;abcde&quot;;</code>)</li><li>函数指针：<code>int (*p)(int a, int b);</code>，<code>*p</code> 两侧的括号不能省略。</li><li>函数指针作参数：<code>int fun(int (*p)(int a, int b))&#123;&#125;</code>。</li><li>main 函数的参数可以在操作系统启动程序的时候传递实参：(<code>a.exe &quot;abc&quot; &quot;def&quot;</code>)。</li><li>内存动态分配相关函数(需引入 <code>stdlib.h</code> 头文件)：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(size);<span class="comment">// 分配的内存是连续的空间，失败返回 NULL。</span></span><br><span class="line"><span class="built_in">calloc</span>(n, size);<span class="comment">// 分配 n 个连续的空间，一般用来给数组分配空间(动态数组)，失败返回 NULL。</span></span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">// 可以释放指针所指向的动态空间。</span></span><br><span class="line"><span class="built_in">realloc</span>(p, size);<span class="comment">// 可以重新分配由 malloc 或 calloc 分配的内存大小，失败返回 NULL。</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h1><ol><li>struct 是声明结构体类型时所必须使用的关键字，不能省略。</li><li>定义结构体变量时也需要加上 struct 关键字：<code>struct Student stu1, stu2</code>;。</li><li>计算机对内存的管理是以字为单位的，如果在一个字中只存放了一个字符，虽然只占一个字节，但该字的其他三个字节不会接着存放下一个数据，而会从下一个字开始存放其他数据，因此在使用 sizeof 运算符测量结构体的长度时得到的往往不是理论值。</li><li>可以在声明结构体类型同时定义该结构体变量(<code>struct Student &#123; 成员列表 &#125; 变量名列表;</code>)。</li><li>可以不指定结构体类型名而直接定义结构体变量(<code>struct &#123; 成员列表 &#125; 变量名列表;</code>)。</li><li>结构体可以定义在函数体内。</li><li>可以对结构体内某一成员进行初始化(``)，此时其他成员也会被初始化为各类型初始值。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">b</span> =</span> &#123;.age = <span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure></li><li>同类型的结构体变量可以互相赋值(<code>stu1=stu2;</code>)。</li><li>共用体为几个变量共用一个内存区，其所占的内存长度等于最长的成员的长度。</li><li>对共用体变量进行初始化时，初始化表中只能有一个量。</li><li>每一个枚举元素都代表一个整数，默认是从 0 开始，也可以在定义的时候手动指定。</li><li>typedef 可以声明一种新的数据类型代替原有的数据类型。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> year; <span class="keyword">int</span> month; <span class="keyword">int</span> day &#125; Date;</span><br></pre></td></tr></table></figure></li><li>typedef 定义数组变量：<code>typedef int nums[100];</code></li><li>typedef 定义指针变量：<code>typedef int* Pnum;</code></li><li>typedef 定义函数指针变量：<code>typedef int(*Pointer)(int a, int b);</code></li><li>typedef 可以用来解决将程序移植在不同操作系统时遇到的字节大小不同或函数名不一致的问题。</li></ol><h1 id="文件的输入与输出"><a href="#文件的输入与输出" class="headerlink" title="文件的输入与输出"></a>文件的输入与输出</h1><ol><li>文件名也叫文件标识，包括文件路径、文件名主干和文件后缀三个部分。</li><li>ANSI C标准采用缓冲文件系统来处理数据文件，系统自动在内存区为程序中每一个正在使用的文件开辟一个缓冲区。从内存向磁盘输出数据时必须先送到缓冲区，<code>等数据装满缓冲区之后才一起送到磁盘</code>；从磁盘读入数据到内存时，则一次从磁盘将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个将数据送到程序的数据区(程序变量)。缓冲区的大小由编译系统决定。</li><li>每一个被使用的文件都在内存中开辟一个相应的文件信息区，用来存放文件的信息，这些信息放在一个结构体变量中(FILE)。</li><li>打开文件会为文件建立相应的信息区和文件缓冲区；关闭文件会撤销信息区和缓冲区。</li><li>通常将 fopen 函数的返回值赋给一个文件指针变量(<code>FILE *fp</code>)。</li><li>打开文件的方式：<code>r</code>、<code>w</code>、<code>a </code>分别为只读、只写、追加一个文本文件。如果需要读写二进制数据，则在其后面加 <code>b</code>。如果打开文件既要读又要写，则在其后面加 <code>+</code>。</li><li>打开一个不存在的文件时，如果打开方式中有 <code>w</code>，会新建一个文件，否则会出错返回 NULL。</li><li>回车符为 <code>\r</code>，换行符为 <code>\n</code>。读文本文档时，会自动将文件中的回车换行符(<code>\r\n</code>)转换为一个换行符(<code>\n</code>)；写文本文档时，会自动将换行符转换为回车换行两个字符。读写二进制文件则不会自动转换。</li><li>C语言系统已经把 fputc 和 fgetc 函数宏定义为 putc 和 getc。(然而并没有找到)</li><li>文件操作相关函数：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fopen(filename, mode);<span class="comment">// 打开一个文件。</span></span><br><span class="line">fclose(fp);<span class="comment">// 关闭打开的文件。</span></span><br><span class="line">fgetc(fp);<span class="comment">// 从文件中读取一个字节并将索引后移一位，成功返回读取的字符，失败返回 EOF(-1)。</span></span><br><span class="line">fputc(ch, fp);<span class="comment">// 写入一个字节到文件中并将索引后移一位，成功返回输出的字符，失败返回 EOF(-1)。</span></span><br><span class="line">feof(fp);<span class="comment">// 判断文件指针的索引是否移动到文件末尾，遇到文件结束返回非 0，否则返回 0。</span></span><br><span class="line">fgets(str, n, fp);<span class="comment">// 从 fp 指向的文件读入 n 个字节放入字符数组 str 中，成功返回 str 地址，失败返回 NULL。</span></span><br><span class="line"><span class="built_in">fputs</span>(str, fp);<span class="comment">// 把 str 所指向的字符串写到文件指针变量 fp 所指向的文件中，成功返回 0，失败返回非 0 值。</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, str, <span class="built_in">list</span>);<span class="comment">// 格式化输出文件，fprintf(fp, &quot;%d&quot;, i) 输出的内容就是 i 的值。</span></span><br><span class="line"><span class="built_in">fscanf</span>(fp, str, <span class="built_in">list</span>);<span class="comment">// 格式化输入文件，fscanf(fp, &quot;%d&quot;, &amp;i) 读取文件中的整数赋值给变量 i。</span></span><br><span class="line">fread(buffer, size, count, fp);<span class="comment">// 用二进制方式读文件。其中 size 是字节数，count 是数据项。比如读取数据给一个整数数组，size 就是 4，count 就是数组长度。</span></span><br><span class="line">fwrite(buffer, size, count, fp);<span class="comment">// 用二进制方式写文件。</span></span><br><span class="line">rewind(fp);<span class="comment">// 将文件内部的指针重新指向一个流的开头。</span></span><br><span class="line">fseek(fp, offset, fromwhere);<span class="comment">// 重定位流(数据流/文件)上的文件内部位置指针。fromwhere 可取值 文件头 SEEK_SET、当前位置 SEEK_CUR、和文件尾 SEEK_END，实际值分别对应 0 1 2。offset 是基于 fromwhere 的偏移量。</span></span><br><span class="line">ftell();<span class="comment">// 用于得到文件位置指针当前位置相对于文件首的偏移字节数。</span></span><br><span class="line">ferror(fp);<span class="comment">// 判断文件操作是否出错，返回 0 表示未出错，返回非 0 表示出错。每次调用文件输入输出函数都会产生一个新的 ferror 值，因此应当在输入输出后立即检查避免信息丢失。执行 fopen 时会自动置 0。</span></span><br><span class="line">flearerr(fp);<span class="comment">// 将文件错误标志和文件结束标志置为 0。一般用在 ferror 检测到出错之后将标志置 0，以便下一次检测。</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>宏名字符串</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>宏名(参数1, 参数2...)字符串</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span>宏名</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;文件名&quot;</span> (或 <span class="meta-string">&lt;文件名&gt;)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>常量表达式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>宏名</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>宏名</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Flex 布局</title>
      <link href="article/20/"/>
      <url>article/20/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex-布局父项常见属性"><a href="#Flex-布局父项常见属性" class="headerlink" title="Flex 布局父项常见属性"></a>Flex 布局父项常见属性</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>flex-direction 可以用来设置主轴的方向。</p><p>在 flex 布局中，是分为主轴和侧轴两个方向的。</p><p>默认主轴方向就是 x 轴方向，水平向右。</p><p>默认侧轴方向就是 y 轴方向，垂直向下。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>从左到右 (默认值)</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>justify-content 属性定义了项目在 <span style="color: red">主轴上</span> 的对齐方式。</p><p style="color: red;">注意：使用这个属性之前一定要确定好主轴是哪个。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从头部开始排列 (默认值)</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边，再平分剩余空间</td></tr></tbody></table><h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>默认情况下，项目都排在一条线上。flex-wrap 属性可以修改子元素是否换行显示。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行 (默认值)</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>align-items 是控制子项在侧轴上的排列方式，在子项为 <span style="color: red;">单行</span>  的时候使用。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下 (默认值)</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中 (垂直居中)</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>align-content 可以设置子项在侧轴上的排列方式，并且只能用于子项为 <span style="color: red;">多行</span> 的情况，在单行下是没有效果的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>在侧轴的头部开始排列 (默认值)</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项平分剩余空间</td></tr><tr><td>space-between</td><td>子项先两边贴边，再平分剩余空间</td></tr><tr><td>stretch</td><td>子项拉伸</td></tr></tbody></table><h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow 属性是 flex-direction属性和 flex-wrap 属性的复合属性。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure><h1 id="Flex-布局子项常见属性"><a href="#Flex-布局子项常见属性" class="headerlink" title="Flex 布局子项常见属性"></a>Flex 布局子项常见属性</h1><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex 属性定义子项分配 <span style="color: red;">剩余空间</span>，用 flex 来表示占多少份。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>align-self 属性用来控制子项自己在侧轴上的排列方式。它允许单个项目有与其他项目不一样的对齐方式，可以覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line">    <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认值为 0 。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 简单学习笔记</title>
      <link href="article/19/"/>
      <url>article/19/</url>
      
        <content type="html"><![CDATA[<blockquote><p>VUE 官方网站: <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br>VUE 官方教程(v2): <a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></p></blockquote><h1 id="Vue-基本指令"><a href="#Vue-基本指令" class="headerlink" title="Vue 基本指令"></a>Vue 基本指令</h1><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式 "></a>插值表达式 </h2><p>插值表达式内可以写任何合法的JS表达式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg + &quot;abc&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p><code>v-cloak</code> 会在页面渲染完成之后移除，可以通过CSS的属性选择器来操作被其修饰的元素。</p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p><code>v-text</code> 会全部替换标签体里的内容，而且内部支持写表达式。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-text 与 插值表达式 的区别:</strong></p><ul><li>使用插值表达式，存在内容闪烁问题，但是 v-text 没有。</li><li>在插值表达式中可以使用 v-cloak 解决闪烁问题。</li><li>插值表达式只会插入内容，并不会清除其余内容。而 v-text 则会清除所有内容。</li></ul><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p><code>v-html</code> 会将元素当成HTML标签解析后输出。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li>v-bind 主要用于元素属性的单向绑定，从 data 自动同步到 view 上。</li><li><code>v-bind:class=&quot;fl&quot;</code> 可以简写成 <code>:class=&quot;fl&quot;</code> 。</li><li><font color="red">如果想要实现表达式的拼接，被拼接的字符串一定要用引号包裹，否则会被当成变量解析。</font></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li>v-on 主要用于元素的事件绑定。</li><li><code>v-on:click=&quot;method&quot;</code> 可以简写成 <code>@click=&quot;method&quot;</code> 。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>v-model 主要用于元素属性的双向绑定。</li><li>在Vue中，只有 v-model 指令实现了数据的双向绑定，其他指令都是单向的。</li><li><font color='red'>v-model 只能应用在表单元素中。</font></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表，推荐只要涉及到 <code>v-for</code> 这种循环，就给循环的每一项都添加 <code>:key</code> 属性。<code>:key</code> 属性只接受 number 或者 string 类型。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; index &#125;&#125; ---- &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if-amp-v-show"><a href="#v-if-amp-v-show" class="headerlink" title="v-if &amp; v-show"></a>v-if &amp; v-show</h2><p><code>v-if</code> 指令和 <code>v-show</code> 指令都用于条件性地渲染一块内容。不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property display。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span>&gt;</span>MSG<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>MSG<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul><li>在事件后面加上 <code>.stop</code> 即可防止事件冒泡。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;innerClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在事件后面加上 <code>.prevent</code> 即可阻止事件的默认行为。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;linkClick&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>.capture</code> 添加事件监听器时使用事件捕获模式。</li><li><code>.self</code> 只当事件在该元素本身（比如不是子元素）触发时触发回调。</li><li><code>.once</code> 事件只触发一次。</li></ul><h2 id="Vue-中使用样式"><a href="#Vue-中使用样式" class="headerlink" title="Vue 中使用样式"></a>Vue 中使用样式</h2><h3 id="class-样式"><a href="#class-样式" class="headerlink" title="class 样式"></a>class 样式</h3><ol><li>数组</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>三元表达式</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, isActive?&#x27;active&#x27;:&#x27;&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>数组中嵌套对象</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, &#123;&#x27;active&#x27;: isActive&#125;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>直接使用对象</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red: true, thin: true, active: isActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>直接在元素上通过 :style 的形式，书写样式对象。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color: &#x27;red&#x27;, &#x27;font-size&#x27;: &#x27;40px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-过滤器-filter"><a href="#Vue-过滤器-filter" class="headerlink" title="Vue 过滤器 filter()"></a>Vue 过滤器 filter()</h1><p>概念: Vue.js 允许你自定义过滤器，<strong>可以被用作一些常见的文本格式化</strong>，过滤器可以用在两个地方：插值表达式和 v-bind 表达式，过滤器应被添加在 JavaScript 表达式的尾部，由管道符指示。</p><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; date | formatDate &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.filter(<span class="string">&#x27;formatDate&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> data + <span class="string">&#x27;extra&#x27;</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h2><p>如果全局过滤器和私有过滤器重名了，则会优先使用局部过滤器(就近原则)。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; date | formatDate &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        filters: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">formatDate</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> data + <span class="string">&quot;extra&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-自定义指令"><a href="#Vue-自定义指令" class="headerlink" title="Vue 自定义指令"></a>Vue 自定义指令</h1><p>简介: 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</p><h2 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">bind</span>(<span class="params">el</span>)</span> &#123;&#125;, <span class="comment">// 元素被 VUE 实例解析的时候调用(el为元素)</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">inserted</span>(<span class="params">el</span>)</span> &#123; <span class="comment">// 元素被插入到文本的父节点时调用</span></span></span><br><span class="line">            el.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        directives: &#123;</span><br><span class="line">            focus: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 指令的定义</span></span></span><br><span class="line"><span class="javascript">                inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line">                    el.focus()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h2><p>指令钩子函数会被传入以下参数：</p><ul><li><p><code>el</code>: 指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p><code>binding</code>: 一个对象，包含以下 property：</p><ul><li><p><code>name</code>：指令名，不包括 v- 前缀。</p></li><li><p><code>value</code>：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</p></li><li><p><code>oldValue</code>：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</p></li><li><p><code>expression</code>：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</p></li><li><p><code>arg</code>：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</p></li><li><p><code>modifiers</code>：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</p></li></ul></li><li><p><code>vnode</code>：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</p></li><li><p><code>oldVnode</code>：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p></li></ul><h2 id="钩子函数简写"><a href="#钩子函数简写" class="headerlink" title="钩子函数简写"></a>钩子函数简写</h2><p>在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子。比如这样写：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.directive(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-的生命周期"><a href="#Vue-的生命周期" class="headerlink" title="Vue 的生命周期"></a>Vue 的生命周期</h1><h2 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h2><ol><li><p><strong>new Vue()</strong>: 创建一个Vue的实例</p></li><li><p>Init Events &amp; Lifecycle</p></li><li><p><strong>beforeCreate()</strong></p></li><li><p>Init injections &amp; reactivity: 初始化 data 和 methods</p></li><li><p><strong>created()</strong></p></li><li><p>编译模板页面(不放在页面中)。</p></li><li><p><strong>beforeMount()</strong>: 即将渲染(在这个函数中，页面中的DOM元素是原始的)。</p></li><li><p>将指定的 el 元素替换为编译好的 HTML 结构。</p></li><li><p><strong>mounted()</strong>: 已完成渲染，创建阶段结束，进入运行阶段。</p></li></ol><h2 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h2><p>主要工作就是根据最新的 data 值来重新渲染页面。</p><p>当 data 更新之后触发一下事件: </p><ol><li><p><strong>beforeUpdate()</strong>: 页面渲染之前。</p></li><li><p><strong>updated()</strong>: 页面渲染完毕之后。</p></li></ol><h2 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h2><ol><li><p><strong>beforeDestroy()</strong>: 销毁之前调用。</p></li><li><p><strong>destroyed()</strong>: 销毁之后。</p></li></ol><h1 id="Vue-发送请求"><a href="#Vue-发送请求" class="headerlink" title="Vue 发送请求"></a>Vue 发送请求</h1><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><blockquote><p><a href="https://github.com/pagekit/vue-resource">https://github.com/pagekit/vue-resource</a></p></blockquote><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(url).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h1 id="Vue-动画"><a href="#Vue-动画" class="headerlink" title="Vue 动画"></a>Vue 动画</h1><ul><li><p>Vue 把一个完整的动画，拆分成了两部分，入场动画 和 出场动画。</p></li><li><p>入场动画中，包含两个时间点，分别是 进入之前(v-enter) 和 进入之后(v-enter-to)。</p></li><li><p>v-enter 表示动画入场前的起使状态，v-enter-to 表示动画入场完成之后的终止状态。</p></li><li><p>v-enter-active 表示入场动画的时间段，在这里可以规定动画的时长、动画效果。</p></li></ul><h2 id="使用-Vue-动画"><a href="#使用-Vue-动画" class="headerlink" title="使用 Vue 动画"></a>使用 Vue 动画</h2><ol><li><p>把要实现动画的元素，用 <code>&lt;transition&gt;</code> 元素包裹起来。</p></li><li><p>要实现动画的元素，必须使用 <code>v-if</code> 或 <code>v-show</code> 来进行控制。</p></li><li><p>在 <code>style</code> 里设置 <code>.v-enter,.v-leave-to</code> 和 <code>.v-enter-active,.v-leave-active</code> 的样式。</p></li><li><p><font color="green">可以使用钩子函数设置自定义动画。</font></p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateX(100px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line">  transition: all 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b-button</span> <span class="attr">variant</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">b-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>动画测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用现成动画库"><a href="#使用现成动画库" class="headerlink" title="使用现成动画库"></a>使用现成动画库</h2><ol><li>导入动画css</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save animate.css</span><br><span class="line">import &#x27;animate.css&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>设置动画</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce animate__faster&quot;</span>&gt;</span>动画测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表动画"><a href="#列表动画" class="headerlink" title="列表动画"></a>列表动画</h2><p>不知道为啥没效果，可能什么地方不对吧，懒得折腾动画了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(i)&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span> &#125;,</span></span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      flag: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">remove</span>(<span class="params">i</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.list.splice(i, <span class="number">1</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">ul &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  line-height: 30px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  margin: 5px;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  width: 500px;</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">  background-color: orange;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translateY(200px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.v-enter-action</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-leave-action</span> &#123;</span></span><br><span class="line">  transition: all 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-自定义组件"><a href="#Vue-自定义组件" class="headerlink" title="Vue 自定义组件"></a>Vue 自定义组件</h1><ul><li><p>template 属性中，不能单独放一段文本，必须用标签包裹起来。</p></li><li><p>如果要在 template 中放置多个元素，那么在这些元素外必须有唯一的根元素进行包裹。</p></li></ul><h2 id="全局自定义组件"><a href="#全局自定义组件" class="headerlink" title="全局自定义组件"></a>全局自定义组件</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom1</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 先调用 Vue.extend 得到组件的构造函数。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> com1 = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是创建的一个全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 通过 Vue.component(&#x27;组件名称&#x27;, &#x27;组件的构造函数&#x27;) 来注册全局组件。</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;mycom1&#x27;</span>, com1);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom2</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;mycom2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是直接使用 Vue.component 创建出来的组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个 template 标签元素 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 Vue 提供的 template 标签，可以定义组件的UI模板结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是外界定义的组件UI结构<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom3</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;mycom3&#x27;</span>, <span class="string">&#x27;#tmpl&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="局部自定义组件"><a href="#局部自定义组件" class="headerlink" title="局部自定义组件"></a>局部自定义组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom4</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        directives: &#123;&#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&quot;mycom4&quot;</span>: &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                template: &#x27;<span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是定义的局部组件 </span><span class="template-variable">&#123;&#123; <span class="name">msg</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">                data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    msg: <span class="string">&#x27;data&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">组件中的 data 需要定义成一个 function ，因为每实例化一个组件，就会调用一次 data 的 function 来获取一个新的值，从而保证每个组件的 data 数据都是独立的。</font></p><h2 id="评论例子"><a href="#评论例子" class="headerlink" title="评论例子"></a>评论例子</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cmt-box</span> @<span class="attr">func</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cmt-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cmt-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cmt-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;我是张三&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;我是李四&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;小黄&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;我是小黄&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;我是小红&quot;</span> &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.list.push(item);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    <span class="string">&quot;cmt-item&quot;</span>: &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: `<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>评论人: </span><span class="template-variable">&#123;&#123; <span class="name">item.name</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">item.content</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&quot;item&quot;</span>],</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="string">&quot;cmt-box&quot;</span>: &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;m-4&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>昵称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>内容:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> <span class="attr">id</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cmt_box_add&quot;</span>&gt;</span>发表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">          content: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">cmt_box_add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&quot;func&quot;</span>, &#123; <span class="attr">name</span>: <span class="built_in">this</span>.name, <span class="attr">content</span>: <span class="built_in">this</span>.content &#125;);</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">ul &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  line-height: 30px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  margin: 5px;</span><br><span class="line">  padding-top: 15px;</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">  width: 500px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用-refs-来获取元素和组件"><a href="#使用-refs-来获取元素和组件" class="headerlink" title="使用 refs 来获取元素和组件"></a>使用 refs 来获取元素和组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在元素加上加上 ref 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">ref</span>=<span class="string">&quot;myh3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在需要的地方使用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.myh3.innerHTML);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="在-vue-组件中-data-和-props-的区别"><a href="#在-vue-组件中-data-和-props-的区别" class="headerlink" title="在 vue 组件中 data 和 props 的区别"></a>在 vue 组件中 data 和 props 的区别</h1><ol><li>data 在组件中，要被定义成 function 并返回一个对象。</li><li>props 在组件中，要被定义成数组，其中数组的值都是字符串名，表示父组件传递过来的数据。</li><li>props 的数据，不要直接哪来修改，如果想要修改，必须在 data 上重新定义一个属性，然后把属性的值从 this.props 拿过来。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务的一些属性</title>
      <link href="article/18/"/>
      <url>article/18/</url>
      
        <content type="html"><![CDATA[<h1 id="事务的-ACID-属性"><a href="#事务的-ACID-属性" class="headerlink" title="事务的 ACID 属性"></a>事务的 ACID 属性</h1><ol><li><p>原子性 (Atomicity)</p><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></li><li><p>一致性 (Consistency)</p><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p>隔离性 (Isolation)</p><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p>持久性 (Durability)</p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h1 id="数据库的并发问题"><a href="#数据库的并发问题" class="headerlink" title="数据库的并发问题"></a>数据库的并发问题</h1><ul><li><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题。</p><ul><li><p>脏读：对于两个事务 T1 和 T2，T1 读取了已经被 T2 更新但还没有被提交的字段。之后若 T2 回滚，T1 读取的内容就是临时且无效的。</p></li><li><p>不可重复读：对于两个事务 T1 和 T2，T1 读取了一个字段，然后 T2 更新了该字段，之后 T1 再次读取同一个字段，值就不同了。</p></li><li><p>幻读：对于两个事务 T1 和 T2，T1 从一个表中读取了一个字段，然后 T2 在该表中插入了一些新行，之后如果 T1 再次读取同一个表，就会多出几行。</p></li></ul></li><li><p>数据库事务的隔离性: 数据库系统必须具有隔离并发运行各个事物的能力，使它们不会相互影响，避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别，数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p></li></ul><h1 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h1><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITED</td><td>( 读未提交数据 ) 允许事务读取未被其他事务提交的变更，脏读，不可重复读和幻读的问题都会出现。</td></tr><tr><td>READ COMMITED</td><td>( 读已提交数据 ) 只允许事务读取已经被其它事务提交的变更，可以避免脏读，但不可重复读和幻读问题仍然可能出现。</td></tr><tr><td>REPEATABLE READ</td><td>( 可重复读 ) 确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读问题仍然可能出现。</td></tr><tr><td>SERIALLZABLE</td><td>( 串行化 ) 确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作，所有并发问题都可以避免，但性能十分低下。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Tomcat 日志输出乱码</title>
      <link href="article/17/"/>
      <url>article/17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章为转载。</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>打开 <code>Tomcat </code> 安装路径的 <code>tomcat/conf/</code> 目录，修改 <code>logging.properties</code> 配置文件。</p><h1 id="Output-乱码解决"><a href="#Output-乱码解决" class="headerlink" title="Output 乱码解决"></a>Output 乱码解决</h1><p>找到下面的配置，将其注释掉。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># java.util.logging.ConsoleHandler.encoding = UTF-8</span></span><br></pre></td></tr></table></figure><p>或者将 <code>UTF-8</code> 改为 <code>GBK</code>。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">java.util.logging.ConsoleHandler.encoding</span> = <span class="string">GBK</span></span><br></pre></td></tr></table></figure><h1 id="Tomcat-Localhost-Log-乱码解决"><a href="#Tomcat-Localhost-Log-乱码解决" class="headerlink" title="Tomcat Localhost Log 乱码解决"></a>Tomcat Localhost Log 乱码解决</h1><p>找到下面的配置，将其注释掉。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8</span></span><br></pre></td></tr></table></figure><p>或者将 <code>UTF-8</code> 改为 <code>GBK</code>。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">localhost.org.apache.juli.AsyncFileHandler.encoding</span> = <span class="string">GBK</span></span><br></pre></td></tr></table></figure><h1 id="Tomcat-Catania-Log-乱码解决"><a href="#Tomcat-Catania-Log-乱码解决" class="headerlink" title="Tomcat Catania Log 乱码解决"></a>Tomcat Catania Log 乱码解决</h1><p>找到下面的配置，将其注释掉。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8</span></span><br></pre></td></tr></table></figure><p>或者将 <code>UTF-8</code> 改为 <code>GBK</code>。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">catalina.org.apache.juli.AsyncFileHandler.encoding</span> = <span class="string">GBK</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 转载 </tag>
            
            <tag> Tomcat </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 读写文件的几种方式</title>
      <link href="article/16/"/>
      <url>article/16/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章转载自: <a href="https://www.cnblogs.com/MyTiMo/p/10998525.html">https://www.cnblogs.com/MyTiMo/p/10998525.html</a></p></blockquote><p><strong>Java 把不同来源和目标的数据都统一抽象为数据流</strong></p><p>Java语言的输入输出功能是十分强大而灵活的。</p><p>在Java类库中，IO部分的内容是很庞大的，因为它涉及的领域很广泛：标准输入输出，文件的操作，网络上的数据流，字符串流，对象流，zip文件流等等。</p><p>这里介绍几种读写文件的方式。</p><h1 id="IO-Stream-字节流"><a href="#IO-Stream-字节流" class="headerlink" title="IO Stream(字节流)"></a>IO Stream(字节流)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文件(字节流)</span></span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.txt&quot;</span>);</span><br><span class="line"><span class="comment">//写入相应的文件</span></span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\2.txt&quot;</span>);</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="comment">//一次性取多少字节</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="comment">//接受读取的内容(n就代表的相关数据，只不过是数字的形式)</span></span><br><span class="line"><span class="keyword">int</span> n = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//循环取出数据</span></span><br><span class="line"><span class="keyword">while</span> ((n = in.read(bytes,<span class="number">0</span>,bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//转换成字符串</span></span><br><span class="line">    String str = new String(bytes,0,n,&quot;UTF-8&quot;); #这里可以实现字节到字符串的转换，比较实用</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">//写入相关文件</span></span><br><span class="line">    out.write(bytes, <span class="number">0</span>, n);</span><br><span class="line">    <span class="comment">//清除缓存向文件写入数据</span></span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="Buffered-IO-Stream-缓存字节流"><a href="#Buffered-IO-Stream-缓存字节流" class="headerlink" title="Buffered IO Stream(缓存字节流)"></a>Buffered IO Stream(缓存字节流)</h1><p>使用方式和字节流差不多，但是效率更高(推荐使用)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文件(缓存字节流)</span></span><br><span class="line">BufferedInputStream in=<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.txt&quot;</span>));</span><br><span class="line"><span class="comment">//写入相应的文件</span></span><br><span class="line">BufferedOutputStream out=<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\2.txt&quot;</span>));</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="comment">//一次性取多少字节</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="comment">//接受读取的内容(n就代表的相关数据，只不过是数字的形式)</span></span><br><span class="line"><span class="keyword">int</span> n = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//循环取出数据</span></span><br><span class="line"><span class="keyword">while</span> ((n = in.read(bytes,<span class="number">0</span>,bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//转换成字符串</span></span><br><span class="line">    String str = <span class="keyword">new</span> String(bytes,<span class="number">0</span>,n,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">//写入相关文件</span></span><br><span class="line">    out.write(bytes, <span class="number">0</span>, n);</span><br><span class="line">    <span class="comment">//清除缓存，向文件写入数据</span></span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="IO-Stream-Reader-Writer"><a href="#IO-Stream-Reader-Writer" class="headerlink" title="IO Stream Reader/Writer"></a>IO Stream Reader/Writer</h1><p>这种方式不建议使用，不能直接字节长度读写。使用范围用做字符转换。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文件(字节流)</span></span><br><span class="line">InputStreamReader in = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//写入相应的文件</span></span><br><span class="line">OutputStreamWriter out = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\2.txt&quot;</span>));</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="comment">//循环取出数据</span></span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = in.read(chars,<span class="number">0</span>,chars.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(len);</span><br><span class="line">    <span class="comment">//写入相关文件</span></span><br><span class="line">    out.write(chars,<span class="number">0</span>,len);</span><br><span class="line">    <span class="comment">//清除缓存</span></span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="Buffered-Reader-Writer-缓存流"><a href="#Buffered-Reader-Writer-缓存流" class="headerlink" title="Buffered Reader/Writer(缓存流)"></a>Buffered Reader/Writer(缓存流)</h1><p>提供read Line方法读取一行文本。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.txt&quot;</span>);</span><br><span class="line">FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\2.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(fileInputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(fileOutputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//读取文件(字符流)</span></span><br><span class="line">BufferedReader in = new BufferedReader(inputStreamReader,&quot;UTF-8&quot;));#这里主要是涉及中文</span><br><span class="line"><span class="comment">//BufferedReader in = new BufferedReader(new FileReader(&quot;d:\\1.txt&quot;)));</span></span><br><span class="line"><span class="comment">//写入相应的文件</span></span><br><span class="line">BufferedWriter out = <span class="keyword">new</span> BufferedWriter(outputStreamWriter,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">//BufferedWriter out = new BufferedWriter(new FileWriter(&quot;d:\\2.txt&quot;))；</span></span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="comment">//循环取出数据</span></span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((str = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">//写入相关文件</span></span><br><span class="line">    out.write(str);</span><br><span class="line">    out.newLine();</span><br><span class="line">    <span class="comment">//清除缓存向文件写入数据</span></span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="Reader、Print-Writer"><a href="#Reader、Print-Writer" class="headerlink" title="Reader、Print Writer"></a>Reader、Print Writer</h1><p>Print Writer 这个很好用，在写数据的同事可以格式化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文件(字节流)</span></span><br><span class="line">Reader in = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//写入相应的文件</span></span><br><span class="line">PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d:\\2.txt&quot;</span>));</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line"><span class="comment">//循环取出数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(len);</span><br><span class="line">    <span class="comment">//写入相关文件</span></span><br><span class="line">    out.write(len);</span><br><span class="line">    <span class="comment">//清除缓存</span></span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭流</span></span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本的几种用法就这么多，当然每一个读写的使用都是可以分开的。为了更好的来使用 IO。流里面的读写，建议使用Buffered Input Stream、Buffered Output Stream。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
            <tag> 读写文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客部署到服务器</title>
      <link href="article/15/"/>
      <url>article/15/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本教程使用系统为 <code>Centos 7.x</code>。</p><h1 id="服务器安装-Git"><a href="#服务器安装-Git" class="headerlink" title="服务器安装 Git"></a>服务器安装 Git</h1><p>如果 <code>服务器端</code> 没有安装 Git 程序，可以通过下面的命令来安装。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前 Git 版本</span></span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 Git</span></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install -y git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="创建-Git-目录和博客目录"><a href="#创建-Git-目录和博客目录" class="headerlink" title="创建 Git 目录和博客目录"></a>创建 Git 目录和博客目录</h1><p>在 <code>服务器端</code> 执行下面的命令来创建 Git 目录和博客目录。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换目录</span></span><br><span class="line">cd /www/wwwroot/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 Git 仓库</span></span><br><span class="line">git init --bare vsneko.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建博客目录</span></span><br><span class="line">mkdir www.vsneko.com</span><br></pre></td></tr></table></figure><h1 id="修改-Git-推送设置"><a href="#修改-Git-推送设置" class="headerlink" title="修改 Git 推送设置"></a>修改 Git 推送设置</h1><p>通过创建 Hook 钩子函数，来将 Git 推送过来的文件保存到博客目录（而不是 Git 工作目录）。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换目录</span></span><br><span class="line">cd vsneko.git/hooks/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 post-receive 文件</span></span><br><span class="line">vi post-receive</span><br></pre></td></tr></table></figure><p>进入编辑模式之后，输入如下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">git --work-tree=/www/wwwroot/www.vsneko.com --git-dir=/www/wwwroot/vsneko.git checkout -f</span><br></pre></td></tr></table></figure><p>修改保存完毕之后，必须要添加 <code>可执行</code> 的权限，否则无法生效。</p><pre><code>chmod +x post-receive</code></pre><h1 id="SSH-公钥"><a href="#SSH-公钥" class="headerlink" title="SSH 公钥"></a>SSH 公钥</h1><p>必须将本地公钥配置到服务器端，否则没有权限。</p><p>在 <code>本地</code> 执行下面的命令来配置公钥（使用 Git Bash）。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置 Git 信息</span></span><br><span class="line">git config --global user.name &quot;shironekoa3&quot;</span><br><span class="line">git config --global user.email &quot;shironekoa3@qq.com&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地生成密钥</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;shironekoa3@qq.com&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看公钥</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将公钥复制到服务器（注意跟着提示走）</span></span><br><span class="line">ssh-copy-id root@ip</span><br></pre></td></tr></table></figure><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>在本地测试看刚刚搭建的 Git 仓库能不能拉取下来。</p><pre><code>git clone root@ip:/www/wwwroot/vsneko.git</code></pre><p>如果能够正常拉取，则配置成功。</p><p>也可以进行推送，而且推送的文件会自动转移到博客目录。</p><h1 id="Hexo-配置部署信息"><a href="#Hexo-配置部署信息" class="headerlink" title="Hexo 配置部署信息"></a>Hexo 配置部署信息</h1><p>在 Hexo 博客的配置文件里配置部署的服务器信息：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">  <span class="attr">repository:</span> <span class="string">root@ip:/www/wwwroot/vsneko.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>服务器端可以使用 <code>Nginx</code> 等任何 Web 服务器来搭建网站。</p><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><blockquote><p> LF will be replaced by CRLF in XXX.</p></blockquote><p>这是由于 Linux 中的换行符是 LF，而 Windows 中的换行符是 CRLF，如果想用 Windows 下的 Git 管理来自 Linux 的文本文件，Git 会默认将 LF 转换成 CRLF，并发出烦人的 Warning。</p><p>通过如下命令来关闭自动转换：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前 Git 仓库</span></span><br><span class="line">git config core.autocrlf false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局</span></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 学习笔记</title>
      <link href="article/14/"/>
      <url>article/14/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>Git 提供了很多命令来完成相应的操作。在此记录一些常用的命令，方便以后查阅。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>当安装 Git 后首先要做的事情是设置用户名称和邮箱地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置用户信息</span></span><br><span class="line">git config --global user.name &quot;shironekoa3&quot;</span><br><span class="line">git config --global user.email &quot;shironekoa3@qq.com&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户信息</span></span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>通过上面的命令设置的信息会保存在 <code>~/.gitconfig</code> 文件中。</p><h1 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h1><p>要使用 Git 对代码进行版本控制，首先要获得 Git 仓库。</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>使用此命令来将当前目录初始化成本地 Git 仓库。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone $&#123;url&#125;</span><br></pre></td></tr></table></figure><p><code>$&#123;url&#125;</code> 为远程仓库地址。</p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p>Git 目录里面的 <code>.git</code> 隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息、文件版本等。</p><h2 id="工作目录-工作区"><a href="#工作目录-工作区" class="headerlink" title="工作目录(工作区)"></a>工作目录(工作区)</h2><p>包含 <code>.git</code> 文件夹的目录就是工作目录，主要用于存放开发的代码。</p><h2 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h2><p><code>.git</code> 文件夹中有很多文件，其中 <code>index</code> 文件就是暂存区，也可以叫做 <code>stage</code> 。暂存区是一个临时保存修改文件的地方。如果要提交某个文件，就必须先将文件添加到暂存区。</p><h2 id="文件的两种状态"><a href="#文件的两种状态" class="headerlink" title="文件的两种状态"></a>文件的两种状态</h2><p>Git 工作目录下的文件存在两种状态：</p><ul><li>untracked：未跟踪(未被纳入版本控制)</li><li>tracked：已跟踪(被纳入版本控制)<ul><li>Unmodified 未修改状态</li><li>Modified 已修改状态</li><li>Staged 已暂存状态</li></ul></li></ul><p>这些文件的状态会随着我们执行Git的命令而发生变化。</p><p>可以通过命令来查看文件的状态：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看详细信息</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看简洁信息</span></span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure><h1 id="本地仓库操作命令"><a href="#本地仓库操作命令" class="headerlink" title="本地仓库操作命令"></a>本地仓库操作命令</h1><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将未跟踪文件添加到暂存区，文件变为已跟踪状态</span></span><br><span class="line">git add hello.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存区文件取消暂存，文件变为未跟踪状态</span></span><br><span class="line">git reset HEAD hello.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存区文件提交到仓库 m:message</span></span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加并提交可以合并</span></span><br><span class="line">git commit -a -m &quot;hello.txt&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除文件。此方式会自动添加到暂存区。</span></span><br><span class="line">git rm hello.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Git 日志</span></span><br><span class="line">git log</span><br></pre></td></tr></table></figure><h2 id="忽略列表"><a href="#忽略列表" class="headerlink" title="忽略列表"></a>忽略列表</h2><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志、临时文件等。在这种情况下，我们可以在工作目录中创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件列表。下面是一个示例：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 忽略所有 .a 结尾的文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 排除(不忽略) lib.a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略 /TODO 这个文件</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略 build 目录下的所有文件</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略 doc 目录下的所有 .txt 结尾的文件，不包括子目录</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略 doc 目录下的所有 .pdf 结尾的文件，包括子目录</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p><span style="color: red">在 Windows 环境中，无法直接创建 .gitignore 文件，需要在 linux 命令行中用 touch 命令来创建。</span></p><h1 id="远程仓库操作命令"><a href="#远程仓库操作命令" class="headerlink" title="远程仓库操作命令"></a>远程仓库操作命令</h1><h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>如果想查看已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。它会列出指定的每一个远程服务器的简写。如果已经克隆了远程仓库，那么至少应该能看到 <code>origin</code> ，这是 Git 克隆的仓库服务器的默认名字。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看详细仓库</span></span><br><span class="line">git remote -v</span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>运行如下命令来添加一个新的远程 Git 仓库，同时指定一个可以引用的简写。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin $&#123;url&#125;</span><br></pre></td></tr></table></figure><p><span style="color: red">一个本地仓库可以关联多个远程仓库。</span></p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>可以将所有内容从远程仓库克隆下来。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone $&#123;url&#125;</span><br></pre></td></tr></table></figure><h2 id="移除远程仓库"><a href="#移除远程仓库" class="headerlink" title="移除远程仓库"></a>移除远程仓库</h2><p>如果因为一些原因想要移除一个远程仓库，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm $&#123;name&#125;</span><br></pre></td></tr></table></figure><p><code>$&#123;name&#125;</code> 为远程仓库的名字，比如 <code>origin</code>。</p><p><span style="color: red">此命令只是从本地仓库移除远程仓库的关系记录，并不会影响到远程仓库。</span></p><h2 id="从远程仓库拉取"><a href="#从远程仓库拉取" class="headerlink" title="从远程仓库拉取"></a>从远程仓库拉取</h2><p><code>git fetch</code> 是从远程仓库获取最新版本到本地仓库，但是不会自动 <code>merge</code>。</p><p><code>git pull</code> 与 <code>git fetch</code> 作用相同，但是会自动 <code>merge</code>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取数据到本地仓库，不会自动合并到工作区</span></span><br><span class="line">git fetch</span><br><span class="line">git fetch origin master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动合并本地仓库和工作区的文件</span></span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取数据到本地仓库，并自动合并</span></span><br><span class="line">git pull</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span style="color: red">如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错 (fatal: refusing to merge unrelated histories)，解决此问题可以在 git pull 命令后加入参数 “–allow-unrelated-histories”。</span></p><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>当你想分享你的代码时，可以将其推送到远程仓库。命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程分支 (r: romate)</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="创建-amp-切换分支"><a href="#创建-amp-切换分支" class="headerlink" title="创建&amp;切换分支"></a>创建&amp;切换分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch $&#123;branch-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">git checkout $&#123;branch-name&#125;</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>在 master 分支下合并其他分支，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge $&#123;branch-name&#125;</span><br></pre></td></tr></table></figure><p>如果遇到文件冲突，则需要手动修改冲突文件，然后使用 <code>git add</code> 命令来标识冲突已解决。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line">git branch -d $&#123;branch-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除分支</span></span><br><span class="line">git branch -D $&#123;branch-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line">git push origin -d $&#123;branch-name&#125;</span><br></pre></td></tr></table></figure><h1 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h1><h2 id="操作命令-1"><a href="#操作命令-1" class="headerlink" title="操作命令"></a>操作命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加新的标签</span></span><br><span class="line">git tag $&#123;tag-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看标签信息</span></span><br><span class="line">git show $&#123;tag-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送到远程仓库</span></span><br><span class="line">git push origin $&#123;tag-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检出标签</span></span><br><span class="line">git checkout -b $&#123;branch-name&#125; $&#123;tag&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除标签</span></span><br><span class="line">git tag -d $&#123;tag-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库标签</span></span><br><span class="line">git push origin :refs/tags/$&#123;tag-name&#125;</span><br></pre></td></tr></table></figure><h1 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;shironekoa3&quot;</span><br><span class="line">git config --global user.email &quot;shironekoa3@qq.com&quot;</span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line">git init</span><br><span class="line">git clone $&#123;url&#125;</span><br><span class="line">git status</span><br><span class="line">git status -s</span><br><span class="line">git add hello.txt</span><br><span class="line">git add .</span><br><span class="line">git reset HEAD hello.txt</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git commit -a -m &quot;hello.txt&quot;</span><br><span class="line">git rm hello.txt</span><br><span class="line">git log</span><br><span class="line">git remote</span><br><span class="line">git remote -v</span><br><span class="line">git remote show origin</span><br><span class="line">git remote add origin $&#123;url&#125;</span><br><span class="line">git clone $&#123;url&#125;</span><br><span class="line">git remote rm $&#123;name&#125;</span><br><span class="line">git fetch</span><br><span class="line">git fetch origin master</span><br><span class="line">git merge origin/master</span><br><span class="line">git pull</span><br><span class="line">git pull origin master</span><br><span class="line">git push</span><br><span class="line">git push origin master</span><br><span class="line">git branch</span><br><span class="line">git branch -r</span><br><span class="line">git branch -a</span><br><span class="line">git branch $&#123;branch-name&#125;</span><br><span class="line">git checkout $&#123;branch-name&#125;</span><br><span class="line">git merge $&#123;branch-name&#125;</span><br><span class="line">git branch -d $&#123;branch-name&#125;</span><br><span class="line">git branch -D $&#123;branch-name&#125;</span><br><span class="line">git push origin -d $&#123;branch-name&#125;</span><br><span class="line">git tag</span><br><span class="line">git tag $&#123;tag-name&#125;</span><br><span class="line">git show $&#123;tag-name&#125;</span><br><span class="line">git push origin $&#123;tag-name&#125;</span><br><span class="line">git checkout -b $&#123;branch-name&#125; $&#123;tag&#125;</span><br><span class="line">git tag -d $&#123;tag-name&#125;</span><br><span class="line">git push origin :refs/tags/$&#123;tag-name&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 学习笔记</title>
      <link href="article/13/"/>
      <url>article/13/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-简介"><a href="#MyBatis-简介" class="headerlink" title="MyBatis 简介"></a>MyBatis 简介</h1><blockquote><p>MyBatis 官方文档: <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></blockquote><h2 id="原始-JDBC-操作的分析"><a href="#原始-JDBC-操作的分析" class="headerlink" title="原始 JDBC 操作的分析"></a>原始 JDBC 操作的分析</h2><p>原始 JDBC 开发存在的问题如下：</p><ol><li>数据库连接创建、释放频繁，造成系统资源浪费从而影响系统性能</li><li>SQL 语句在代码中硬编码，造成代码不易维护，实际应用SQL变化的可能较大，SQL变动需要修改Java代码</li><li>查询操作时，需要手动将结果集中的数据封装到实体中，插入操作时需要手动将实体的数据设置到SQL语句的占位符位置</li></ol><p>应对上述问题给出的解决方案：</p><ol><li>使用数据库连接池初始化连接资源</li><li>将SQL语句抽取到XML配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的映射</li></ol><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><ul><li>MyBatis 是一个优秀的、基于 Java 的持久层框架，它内部封装了 <code>JDBC</code> ，使开发者只需要关注SQL语句本身，而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁琐的过程。</li><li>MyBatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 Java 对象和 statement 中 SQL 的动态参数进行映射，生成最终执行的 SQL 语句。</li><li>最后 MyBatis 框架执行 SQL 并将结果集映射为 Java 对象并返回。采用 ORM 思想解决了实体和数据库映射的问题，对 JDBC 进行了封装，屏蔽了 JDBC API 底层访问细节，使我们不用与 JDBC API 打交道，就可以完成对数据库的持久化操作。</li></ul><h1 id="MyBatis-快速入门"><a href="#MyBatis-快速入门" class="headerlink" title="MyBatis 快速入门"></a>MyBatis 快速入门</h1><h2 id="MyBatis-开发步骤"><a href="#MyBatis-开发步骤" class="headerlink" title="MyBatis 开发步骤"></a>MyBatis 开发步骤</h2><ol><li>添加 MyBatis 的坐标</li><li>创建 User 数据表</li><li>编写 User 实体类</li><li>编写映射文件 UserMapper.xml</li><li>编写核心文件 SqlMapConfig.xml</li><li>编写测试类</li></ol><h2 id="添加坐标"><a href="#添加坐标" class="headerlink" title="添加坐标"></a>添加坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写映射文件"><a href="#编写映射文件" class="headerlink" title="编写映射文件"></a>编写映射文件</h2><p>在 <code>resources</code> 目录下创建配置文件 <code>com/vsneko/mapper/UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写核心配置文件"><a href="#编写核心配置文件" class="headerlink" title="编写核心配置文件"></a>编写核心配置文件</h2><p>在 <code>resources</code> 目录下创建配置文件 <code>SqlMapConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1025&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/vsneko/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 session 工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 session 回话对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;UserMapper.selectAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示数据</span></span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    <span class="comment">// [User&#123;id=1, name=&#x27;Zhangsan&#x27;, age=18&#125;, User&#123;id=2, name=&#x27;Lisi&#x27;, age=19&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatis-的数据库基本操作"><a href="#MyBatis-的数据库基本操作" class="headerlink" title="MyBatis 的数据库基本操作"></a>MyBatis 的数据库基本操作</h1><p style="color: red;">MyBatis 事务默认是不提交的，执行更新操作之后要提交事务。(或者在调用 openSession() 方法时传入 true)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure><h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插入操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125; and age=#&#123;age&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>如果传入的参数只有一个，那么在表达式里面写任意文本都可以，但要注意可读性。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis-核心配置文件"><a href="#MyBatis-核心配置文件" class="headerlink" title="MyBatis 核心配置文件"></a>MyBatis 核心配置文件</h1><h2 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h2><ul><li><p>configuration 配置</p><ul><li><p>properties 属性</p></li><li><p>settings 设置</p></li><li><p>typeAliases 类型别名</p></li><li><p>typeHandlers 类型处理器</p></li><li><p>objectFactory 对象工厂</p></li><li><p>plugins 插件</p></li><li><p>environments 环境</p><ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li><p>databaseIdProvider 数据库厂商标识</p></li><li><p>mappers 映射器</p></li></ul></li></ul><h2 id="environments-标签"><a href="#environments-标签" class="headerlink" title="environments 标签"></a>environments 标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认环境为 development --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务管理类型为 JDBC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据源类型为连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1025&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h3><p>事务管理器 <code>transactionManager</code> 类型有两种</p><ul><li>JDBC： 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li>MANAGED：这个配置几乎没做什么，它从来不提交或者回滚一个连接，而是让容器来管理事务的整个生命周期(比如 JEE 应用服务器的上下文)。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 <code>closeConnection</code> 属性设置为 false 来阻止它默认的关闭行为。</li></ul><h3 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h3><p>数据源 <code>dataSource</code> 类型有三种</p><ul><li>UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接</li><li>POOLED：这种数据源的实现利用 “池” 的概念将 JDBC 连接对象组织起来</li><li>JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中在外部配置数据源，然后放置一个 JNDI 上下文的引用</li></ul><h2 id="mappers-标签"><a href="#mappers-标签" class="headerlink" title="mappers 标签"></a>mappers 标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/vsneko/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>mapper 标签的作用是加载映射的，加载方式有如下几种：</p><ol><li>使用相对于类路径的资源引用</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/vsneko/mapper/UserMapper.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用完全限定资源定位符(URL)</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///C:/UserMapper.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用映射器接口实现类的完全限定类名</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.builder.UserMapper&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将包内的映射器接口实现全部注册为映射器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.vsneko.builder&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="properties-标签"><a href="#properties-标签" class="headerlink" title="properties 标签"></a>properties 标签</h2><p>实际开发中，习惯将数据源的配置信息单独抽取成一个 properties 文件，该标签可以加载额外配置的 properties 文件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="typeAliases-标签"><a href="#typeAliases-标签" class="headerlink" title="typeAliases 标签"></a>typeAliases 标签</h2><p>类型别名 <code>typeAliases</code> 是为 Java 类型设置一个短的名字。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在编写映射文件的时候，参数类型可以直接写别名。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插入操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis 框架已经为我们设置好了一些常用的类型别名。</p><table><thead><tr><th>数据类型</th><th>别名</th></tr></thead><tbody><tr><td>String</td><td>string</td></tr><tr><td>Long</td><td>long</td></tr><tr><td>Integer</td><td>int</td></tr><tr><td>Double</td><td>double</td></tr><tr><td>Boolean</td><td>boolean</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h2 id="typeHandlers-标签"><a href="#typeHandlers-标签" class="headerlink" title="typeHandlers 标签"></a>typeHandlers 标签</h2><p>无论是 MyBatis 在预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用到类型处理器，将获取的值以合适的方式转换成 Java 类型。下表描述了一下默认的类型转换器(部分)。</p><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SHORT INTEGER</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 LONG INTEGER</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>你可以重写类型处理器，或者创建你自己的类型处理器来处理不支持的或非标准的类型。</p><p>具体做法为：实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口，</p><p>或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code> ，然后可以选择性地将它映射到一个 JDBC 类型。</p><p><strong>开发步骤：</strong></p><ol><li>定义转换类，继承 BaseTypeHandler</li><li>覆盖 4 个未实现的方法，其中 setNonNullParameter 为 Java 程序设置数据到数据库的回调方法，getNullableResult 为查询时 mysql 的字符串类型转换成 java 的 Type 类型方法。</li><li>在 MyBatis 核心配置文件中进行注册</li><li>测试转换是否正确</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 Java 类型转换成数据库需要的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        preparedStatement.setLong(i, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据库中的类型转换成 Java 类型</span></span><br><span class="line">    <span class="comment">// String 要转换的字段名称</span></span><br><span class="line">    <span class="comment">// ResultSet 查询出的结果集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据库中的类型转换成 Java 类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = resultSet.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据库中的类型转换成 Java 类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = callableStatement.getLong(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.vsneko.handle.DateTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="plugins-标签"><a href="#plugins-标签" class="headerlink" title="plugins 标签"></a>plugins 标签</h2><p>MyBatis 可以使用第三方的插件来对功能进行扩展，分页助手 <code>PageHelper</code> 是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据。</p><p><strong>开发步骤：</strong></p><ol><li>导入通用 PageHelper 的坐标</li><li>在 MyBatis 核心配置文件中配置 PageHelper 插件</li><li>测试分页数据获取</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置分页助手插件(5.X版本) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pageNum, pageSize</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分页相关参数</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(users);</span><br><span class="line">System.out.println(<span class="string">&quot;当前页: &quot;</span> + pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页数量: &quot;</span> + pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;总数量: &quot;</span> + pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数: &quot;</span> + pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;上一页: &quot;</span> + pageInfo.getPrePage());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数: &quot;</span> + pageInfo.getNextPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否是第一页: &quot;</span> + pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否是最后页: &quot;</span> + pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure><h1 id="MyBatis-的-API"><a href="#MyBatis-的-API" class="headerlink" title="MyBatis 的 API"></a>MyBatis 的 API</h1><h2 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h2><p>SqlSessionFactoryBuilder 是 SqlSession 工厂构建器。常用 API为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span></span></span><br></pre></td></tr></table></figure><p>通过加载 MyBatis 的核心文件的输入流的形式来构建一个 <code>SqlSessionFactory</code> 对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取核心配置文件</span></span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 获取 session 工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br></pre></td></tr></table></figure><h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><p>SqlSessionFactory 是 SqlSession 工厂对象，它有多个方法来创建 SqlSession 实例，其中常用的有如下两个：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>openSession()</td><td>会默认开启一个事务，但事务不会自动提交，执行更新操作需要手动提交事务。</td></tr><tr><td>openSession(boolean autoCommit)</td><td>参数为是否自动提交，如果设置为 true，则不需要手动提交事务。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 session 回话对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><p>SqlSession 实例在 MyBatis 中是非常强大的一个类，其主要方法如下：</p><p><strong>执行语句的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>操作事务的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="MyBatis-代理开发方式"><a href="#MyBatis-代理开发方式" class="headerlink" title="MyBatis 代理开发方式"></a>MyBatis 代理开发方式</h1><p><strong>说明</strong></p><p>采用 MyBatis 的代理开发方式实现 DAO 层的开发，这种方式是企业开发的主流。</p><p>Mapper 接口开发方法只需要程序员编写 Mapper 接口(相当于 DAO 接口)，由 MyBatis 框架根据接口定义创建接口的动态代理对象。</p><p>Mapper 接口开发需要遵循以下规范：</p><ol><li>Mapper.xml 文件中的 <code>namespace</code> 与 mapper 接口的全限定名相同</li><li>Mapper 接口方法名和 Mapper.xml 中定义的每个 statement 的 id 相同</li><li>Mapper 接口方法的输入参数类型和 mapper.xml 中定义的每个 sql 的 parameterType 的类型相同</li><li>Mapper 接口方法的输出参数类型和 mapper.xml 中定义的每个 sql 的 resultType 的类型相同</li></ol><p><strong>示例代码</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.vsneko.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 删除操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DAO 层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取资源流</span></span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SqlSession 工厂</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SqlSession 对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作数据</span></span><br><span class="line">    userMapper.deleteUser(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatis-动态-SQL-语句"><a href="#MyBatis-动态-SQL-语句" class="headerlink" title="MyBatis 动态 SQL 语句"></a>MyBatis 动态 SQL 语句</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 MyBatis 的映射文件中，有时候业务逻辑比较复杂，SQL语句是动态变化的，这时候就需要用到 MyBatis 的动态 SQL 语句了。</p><p><strong>官方描述：</strong></p><blockquote><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></blockquote><h2 id="动态SQL-if"><a href="#动态SQL-if" class="headerlink" title="动态SQL-if"></a>动态SQL-if</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">            and name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=0&quot;</span>&gt;</span></span><br><span class="line">            and age=#&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL-foreach"><a href="#动态SQL-foreach" class="headerlink" title="动态SQL-foreach"></a>动态SQL-foreach</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL片段的抽取"><a href="#SQL片段的抽取" class="headerlink" title="SQL片段的抽取"></a>SQL片段的抽取</h2><p>这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。 参数可以静态地（在加载的时候）确定下来，并且可以在不同的 include 元素中定义不同的参数值。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span>select * from user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis-多表操作"><a href="#MyBatis-多表操作" class="headerlink" title="MyBatis 多表操作"></a>MyBatis 多表操作</h1><h2 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date orderTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前订单对应的用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getting and setting...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 手动指定字段与实体属性的映射关系 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column: 数据库字段名     property: 实体类属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.birthday&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *,o.id oid FROM orders o, user u WHERE o.uid=u.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用 <code>association</code> 标签：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 手动指定字段与实体属性的映射关系 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column: 数据库字段名     property: 实体类属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前用户的所有订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Orders&gt; ordersList;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getting and setting...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置集合信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;ordersList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;orders&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *, o.id oid FROM user u, orders o WHERE u.id=o.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>多对多关系的配置与一对多的配置一样，只是SQL语句会有些区别，多对多关系有一个中间表。具体配置参考一对多的配置。</p><h1 id="MyBatis-整合-Spring"><a href="#MyBatis-整合-Spring" class="headerlink" title="MyBatis 整合 Spring"></a>MyBatis 整合 Spring</h1><p>在 spring 配置文件中配置 sessionFactory 之后就可以直接在 service 层自动注入了。</p><p>需要 <code>mybatis-spring</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 MyBatis 核心配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:SqlMapConfig.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为实体类创建别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.vsneko.domain&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描 Mapper 所在包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.vsneko.mapper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 service 层中使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 学习笔记</title>
      <link href="article/12/"/>
      <url>article/12/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC-概述"><a href="#Spring-MVC-概述" class="headerlink" title="Spring MVC 概述"></a>Spring MVC 概述</h1><p>Spring MVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。</p><h1 id="Spring-MVC-开发步骤"><a href="#Spring-MVC-开发步骤" class="headerlink" title="Spring MVC 开发步骤"></a>Spring MVC 开发步骤</h1><h2 id="导入-Spring-MVC-相关坐标"><a href="#导入-Spring-MVC-相关坐标" class="headerlink" title="导入 Spring MVC 相关坐标"></a>导入 Spring MVC 相关坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Spring-MVC-核心控制器-DispathcerServlet"><a href="#配置Spring-MVC-核心控制器-DispathcerServlet" class="headerlink" title="配置Spring MVC 核心控制器 DispathcerServlet"></a>配置Spring MVC 核心控制器 DispathcerServlet</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 SpringMVC 的前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建-Controller-类和视图页面"><a href="#创建-Controller-类和视图页面" class="headerlink" title="创建 Controller 类和视图页面"></a>创建 Controller 类和视图页面</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quick&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-Spring-MVC-核心文件-spring-mvc-xml"><a href="#配置-Spring-MVC-核心文件-spring-mvc-xml" class="headerlink" title="配置 Spring MVC 核心文件 spring-mvc.xml"></a>配置 Spring MVC 核心文件 spring-mvc.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.vsneko.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-MVC-执行流程"><a href="#Spring-MVC-执行流程" class="headerlink" title="Spring MVC 执行流程"></a>Spring MVC 执行流程</h1><ol><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandleMapping 处理器映射器。</li><li>处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进行查找)，生成处理器对象及处理器拦截器 (如果有则生成) 一并返回给 DispatcherServlet。</li><li>DispatcherServlet 调用 HandleAdapter 处理器适配器。</li><li>HandlerAdapter 经过适配调用具体的处理器 (Controller，也叫后端控制器)。</li><li>Controller 执行完成返回 ModelAndView。</li><li>HandlerAdapter 将 Controller 执行结果 ModelAndView 返回给 DispatcherServlet。</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li><li>ViewReslover 解析后返回具体 View。</li><li>DispatcherServlet 根据 View 进行渲染视图 (即将模型数据填充至视图中)。DispatcherServlet 响应用户。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/spring-mvc-step.png" alt="Spring MVC 流程图"></p><h1 id="Spring-MVC-的数据响应"><a href="#Spring-MVC-的数据响应" class="headerlink" title="Spring MVC 的数据响应"></a>Spring MVC 的数据响应</h1><h2 id="数据响应方式"><a href="#数据响应方式" class="headerlink" title="数据响应方式"></a>数据响应方式</h2><ol><li>页面跳转<ul><li>直接返回字符串</li><li>通过 ModelAndView 对象返回</li></ul></li><li>回写数据<ul><li>直接返回字符串</li><li>返回对象或集合</li></ul></li></ol><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><ol><li>返回字符串形式。</li></ol><p>直接返回字符串形式，此种方式会将返回的字符串与视图解析器的前后缀进行拼接然后跳转。</p><p><strong>转发: “forward: success.jsp”， “forward: “可以省略不写。</strong></p><p><strong>重定向: “redirect: success.jsp”</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward: /success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>返回 ModelAndView。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最普通的 ModelAndView</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;/success.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring MVC 容器在调用方法时，会帮你对方法的参数进行相应的注入。</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test2</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;/success.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 Model 和 View 拆分，单独操作。</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用原生的 <code>HttpServletRequest</code>对象，也可以利用 SpringMVC 容器来自动注入。(不推荐)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring MVC 容器在调用方法时，会帮你对方法的参数进行相应的注入。</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回写数据（直接返回字符串）"><a href="#回写数据（直接返回字符串）" class="headerlink" title="回写数据（直接返回字符串）"></a>回写数据（直接返回字符串）</h2><p>在 Web基础 阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话，只需要使用 <code>response.getWriter().print(&quot;Hello World&quot;)</code> 即可。(不推荐)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SpringMVC 中，更好的做法是在方法的上方添加 <code>@ResponseBody</code> 注解，告诉 Spring MVC 容器直接回写数据。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Json-的转换工具"><a href="#使用-Json-的转换工具" class="headerlink" title="使用 Json 的转换工具"></a>使用 Json 的转换工具</h2><p>使用 jackson 工具可以将对象转换成 json 格式数据来返回。</p><ol><li>导入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    u.setAge(<span class="number">19</span>);</span><br><span class="line">    <span class="comment">// 使用 jackson 将 User 对象转换成 json</span></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(u);</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回写数据-返回对象或集合"><a href="#回写数据-返回对象或集合" class="headerlink" title="回写数据(返回对象或集合)"></a>回写数据(返回对象或集合)</h2><p>我们可以通过配置来实现让 Spring MVC 容器自动帮我们将对象转换成 Json 格式数据，此时返回值可以直接是对象或者集合。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    u.setAge(<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在 spring-mvc.xml 配置文件下配置如下代码即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置处理器映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-MVC-注解驱动"><a href="#使用-MVC-注解驱动" class="headerlink" title="使用 MVC 注解驱动"></a>使用 MVC 注解驱动</h2><p>在方法上添加 <code>@ResponseBody</code> 就可以返回 json 格式字符串，但是这样配置比较麻烦，配置的代码比较多，因此我们可以使用 mvc 的注解驱动来代替上述配置。</p><p>只需要在 spring-mvc.xml 文件内配置如下代码即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在 Spring MVC 的各个组件中，处理器映射器、处理器适配器、视图解析器被称为 Spring MVC 的三大组件。</p><p>使用 <code>&lt;mvc:annotation-driven /&gt;</code> 会自动加载 <code>RequestMappingHandlerMapping</code> (处理映射器) 和 <code>RequestMappingHandlerAdapter</code> (处理适配器)。<span style="color: red;">同时使用此注解，默认底层会集成 <code>jackson</code> 进行对象或集合的 json 格式字符串的转换。</span></p><h1 id="Spring-MVC-获取请求数据"><a href="#Spring-MVC-获取请求数据" class="headerlink" title="Spring MVC 获取请求数据"></a>Spring MVC 获取请求数据</h1><h2 id="获取基本类型参数"><a href="#获取基本类型参数" class="headerlink" title="获取基本类型参数"></a>获取基本类型参数</h2><p>Controller 中的业务方法的参数名称要与请求参数的 name 一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/user/test4?username=Zhangsan&amp;age=21</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 容器会自动进行数据类型转换。</p><h2 id="获取POJO类型参数"><a href="#获取POJO类型参数" class="headerlink" title="获取POJO类型参数"></a>获取POJO类型参数</h2><p>Controller 中的业务方法的POJO参数的属性名称要与请求参数的 name 一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/user/test4?name=Zhangsan&amp;age=19</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.getName());</span><br><span class="line">    System.out.println(user.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取数组类型参数"><a href="#获取数组类型参数" class="headerlink" title="获取数组类型参数"></a>获取数组类型参数</h2><p>Controller 中的业务方法的数组名称要与请求参数的 name 一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/user/test4?strs=aaa&amp;strs=bbb&amp;strs=ccc</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    System.out.println(Arrays.asList(strs));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取集合类型参数"><a href="#获取集合类型参数" class="headerlink" title="获取集合类型参数"></a>获取集合类型参数</h2><p>目前并不能直接映射集合参数，需要将集合封装到一个VO对象中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.domain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(VO vo)</span> </span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/test4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[0].name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[0].age&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[1].name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userList[1].age&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取集合类型参数2"><a href="#获取集合类型参数2" class="headerlink" title="获取集合类型参数2"></a>获取集合类型参数2</h2><p>当使用 ajax 提交数据时，可以指定 ContentType 为 <code>application/json</code> 形式，那么在方法参数位置使用 <code>@RequestBody</code> 注解，就可以直接接受集合数据而无需使用 POJO 进行包装。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开放静态资源的访问权限"><a href="#开放静态资源的访问权限" class="headerlink" title="开放静态资源的访问权限"></a>开放静态资源的访问权限</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置哪些目录的请求为资源目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果 Spring MVC 找不到请求目标，则交由 Tomcat 来处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置全局过滤-filter"><a href="#配置全局过滤-filter" class="headerlink" title="配置全局过滤 filter"></a>配置全局过滤 filter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数绑定注解"><a href="#参数绑定注解" class="headerlink" title="参数绑定注解"></a>参数绑定注解</h2><p>当请求的参数名称与 Controller 的业务方法参数名称不一致时，就要通过 <code>@RequestParam</code> 注解来显式绑定。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解 <code>@RequestParam</code> 还有如下参数可以使用:</p><ul><li>value: 请求参数名称</li><li>required: 请求参数是否必须，默认为 <code>true</code> ，提交时没有此参数则报错。</li><li>defaultValue: 没有指定参数时的默认值</li></ul><h2 id="获取-Restful-风格的参数"><a href="#获取-Restful-风格的参数" class="headerlink" title="获取 Restful 风格的参数"></a>获取 Restful 风格的参数</h2><p><code>Restful</code> 是一种软件架构风格，设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p><code>Restful</code> 风格的请求是使用 “URL + 请求方式” 表示一次请求目的的，HTTP协议里面四个表示操作的动词如下:</p><ul><li>GET: 用于获取资源</li><li>POST: 用于新建资源</li><li>PUT: 用于更新资源</li><li>DELETE: 用于删除资源</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/user/test4/Zhangsan</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test4/&#123;name&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(<span class="meta">@PathVariable(value = &quot;name&quot;)</span> String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><p>Spring MVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成 int 型进行参数设置。</p><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如日期类型的数据。</p><p><strong>开发步骤:</strong></p><ol><li>定义转换器类，实现 <code>Converter</code> 接口</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将日期字符串转换成日期对象</span></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 spring-mvc.xml 配置文件中声明转换器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.converter.DateConverter&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>&lt;annotation-driven&gt;</code> 中引用转换器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h2><p>使用 <code>@RequestHeader</code> 注解可以获取请求头信息，相当于 <code>request.getHeader(name)</code> 。</p><p><code>@RequestHeader</code> 注解的属性如下: </p><ul><li>value: 请求头的名称</li><li>required: 是否必须携带此请求头</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;)</span> String user_agent)</span> </span>&#123;</span><br><span class="line">    System.out.println(user_agent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取-Cookie"><a href="#获取-Cookie" class="headerlink" title="获取 Cookie"></a>获取 Cookie</h2><p>使用 <code>@CookieValue</code> 注解可以获取请求头里面的 Cookie 信息。</p><p><code>@CookieValue</code> 注解的属性如下: </p><ul><li>value: 指定 Cookie 的名称</li><li>required: 是否必须携带此 Cookie</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionid)</span> </span>&#123;</span><br><span class="line">    System.out.println(jsessionid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><ol><li>导入 <code>fileupload</code> 和 <code>io</code> 的坐标</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件上传解析器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写文件上传代码</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring MVC 会自动把上传的文件封装成一个 MultipartFile 对象</span></span><br><span class="line"><span class="comment">// uploadFile 参数名必须与表单上的 name 属性一致才能自动绑定</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test6&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">(String name, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span> + originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>与单文件上传类似，如果表单的每个文件的 name 属性一致，则在服务端用 MultipartFile[] 接收，然后循环遍历即可。</p><h1 id="Spring-MVC-拦截器"><a href="#Spring-MVC-拦截器" class="headerlink" title="Spring MVC 拦截器"></a>Spring MVC 拦截器</h1><h2 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h2><p>Spring MVC 的拦截器 类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p><p>将拦截器按一定的顺序联结成一条链，这条链称为 <code>拦截器链(Interceptor Chain)</code> ，在访问被拦截的方法或字段时，拦截器链中的拦截器就会按照之前定义的顺序被调用，拦截器也是 AOP 思想的具体实现。</p><h2 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h2><table><thead><tr><th>区别</th><th>过滤器</th><th>拦截器</th></tr></thead><tbody><tr><td>使用范围</td><td>是 Servlet 规范中的一部分，任何 Java Web工程都可以使用</td><td>是 Spring MVC 框架自己的，只有使用了 Spring MVC 框架的工程才能使用</td></tr><tr><td>拦截范围</td><td>在 url-pattern 中配置了 <code>/*</code> 之后可以对所有资源进行拦截</td><td>只会拦截访问的控制器方法，不会拦截 jsp 和其他静态资源</td></tr></tbody></table><h2 id="拦截器快速入门"><a href="#拦截器快速入门" class="headerlink" title="拦截器快速入门"></a>拦截器快速入门</h2><p>自定义拦截器步骤:</p><ol><li>创建拦截器类，实现 <code>HandlerInterceptor</code> 接口</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 spring-mvc.xml 配置拦截器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.interceptor.MyInterceptor1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>此时已经对相关方法进行拦截</li></ol><h2 id="拦截器方法说明"><a href="#拦截器方法说明" class="headerlink" title="拦截器方法说明"></a>拦截器方法说明</h2><table><thead><tr><th>方法名</th><th></th></tr></thead><tbody><tr><td>preHandle()</td><td>方法将在请求处理之前调用，该方法的返回值是 Boolean 类型的，返回 false 时，表示请求结束，后续的 Interceptor 和 Controller 都不会执行；返回 true 时，会继续调用下一个 Interceptor 的 preHandle 方法。</td></tr><tr><td>postHandle()</td><td>该方法是在当前请求进行处理之后被调用，前提是 preHandle 方法的返回值为 true，而且它会在 DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对 Controller 处理之后的 ModelAndView 对象进行操作。</td></tr><tr><td>afterCompletion()</td><td>该方法将在整个请求结束之后，也就是 DispatcherServlet 渲染了对应的视图之后执行，前提是 preHandle 方法的返回值是 true。</td></tr></tbody></table><h1 id="Spring-MVC-异常处理"><a href="#Spring-MVC-异常处理" class="headerlink" title="Spring MVC 异常处理"></a>Spring MVC 异常处理</h1><h2 id="异常处理的两种方式"><a href="#异常处理的两种方式" class="headerlink" title="异常处理的两种方式"></a>异常处理的两种方式</h2><ul><li>使用 Spring MVC 提供的简单异常处理器 <code>SimpleMappingExceptionResolver</code> 。</li><li>使用 Spring 的异常处理接口 <code>HandlerExceptionResolver</code> 自定义自己的异常处理器。</li></ul><h2 id="简单异常处理器"><a href="#简单异常处理器" class="headerlink" title="简单异常处理器"></a>简单异常处理器</h2><p>Spring MVC 已经定义好了 <code>SimpleMappingExceptionResolver</code> 类型的转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorView&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/error.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ClassCastException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/error.jsp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.NullPointerException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/error.jsp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义异常处理器"><a href="#自定义异常处理器" class="headerlink" title="自定义异常处理器"></a>自定义异常处理器</h2><ol><li>创建异常处理类，实现 <code>HandlerExceptionResolver</code></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vsneko.resolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ClassCastException) &#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;类转换异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置异常处理器</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.resolver.MyExceptionResolver&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP 的简单笔记</title>
      <link href="article/11/"/>
      <url>article/11/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP 简介</h1><p>AOP 即 Aspect Oriented Program 面向切面编程，在面向切面编程的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能“编织”在一起，这就叫AOP。面向切面编程就是 Spring 最为重要的功能之一了，在数据库事务中切面编程被广泛使用。</p><h1 id="AOP-的作用和优势"><a href="#AOP-的作用和优势" class="headerlink" title="AOP 的作用和优势"></a>AOP 的作用和优势</h1><p>作用: 在程序运行期间，不修改源码的情况下对方法进行功能增强。</p><p>优势: 减少重复代码，提高开发效率，并且便于维护。</p><h1 id="AOP-实现原理"><a href="#AOP-实现原理" class="headerlink" title="AOP 实现原理"></a>AOP 实现原理</h1><h2 id="基于-JDK-的动态代理"><a href="#基于-JDK-的动态代理" class="headerlink" title="基于 JDK 的动态代理"></a>基于 JDK 的动态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">    target.getClass().getClassLoader(),     <span class="comment">// 目标对象类加载器</span></span><br><span class="line">    target.getClass().getInterfaces(),      <span class="comment">// 目标对象相同的接口字节码对象数组</span></span><br><span class="line">    <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            advice.before();        <span class="comment">// 前置增强</span></span><br><span class="line">            Object result = method.invoke(target, args);    <span class="comment">//执行目标方法</span></span><br><span class="line">            advice.afterReturning();    <span class="comment">//后置增强</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="基于-cglib-的动态代理"><a href="#基于-cglib-的动态代理" class="headerlink" title="基于 cglib 的动态代理"></a>基于 cglib 的动态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建增强器</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">// 2. 设置父类(目标)</span></span><br><span class="line">enhancer.setSuperclass(Target.class);</span><br><span class="line"><span class="comment">// 3. 设置回调</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        advice.before();    <span class="comment">// 执行前置</span></span><br><span class="line">        Object result = method.invoke(target, objects); <span class="comment">// 执行目标</span></span><br><span class="line">        advice.afterRuturning();    <span class="comment">// 执行后置</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Target proxy = enhancer.create();</span><br></pre></td></tr></table></figure><h1 id="AOP-相关概念"><a href="#AOP-相关概念" class="headerlink" title="AOP 相关概念"></a>AOP 相关概念</h1><p>Spring 的 AOP 底层实现原理就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><ul><li>Target（目标对象）：代理的目标对象。</li><li>Proxy（代理）： 一个类被 AOP 织入增强后，就产生一个结果代理类。</li><li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点，在 Spring 中，这些点指的是方法，因为 Spring 只支持方法类型的连接点。</li><li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li><li>Advice （通知/增强）：所谓通知是指拦截到 Joinpoint 之后要做的事情。</li><li>Aspect（切面）：是切入点和通知的结合。</li><li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。Spring 采用动态代理织入，而 Aspect J 采用编译期织入和类装载期织入。</li></ul><h1 id="AOP-的简单使用"><a href="#AOP-的简单使用" class="headerlink" title="AOP 的简单使用"></a>AOP 的简单使用</h1><ol><li>首先导入 <code>aspectjweaver</code> 的坐标。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建目标类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建增强类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ProceedingJoinPoint: 执行中的连接点(切点)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕增强 前&quot;</span>);</span><br><span class="line">        Object proceed = pjp.proceed(); <span class="comment">//调用切点方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕增强 后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出异常增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置切面(需要引入 aop 包)</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置织入，告诉 Spring 哪些方法(切点)需要进行哪些增强(前置后置)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        声明切面类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="切点表达式的写法"><a href="#切点表达式的写法" class="headerlink" title="切点表达式的写法"></a>切点表达式的写法</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号 (*) 代表任意。</li><li>包名与类名之间一个点 (.) 代表当前包下的类，两个点 (..) 代表当前包及其子包下的类。</li><li>参数列表可以使用两个点 (..) 表示任意个数、任意类型的参数。</li></ul><p>例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution(public void com.vsneko.aop.Target.save())</span><br><span class="line">execution(void com.vsneko.aop.Target.*(..))</span><br><span class="line">execution(* com.vsneko.aop.*.*(..))// 常用</span><br><span class="line">execution(* com.vsneko.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure><h1 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h1><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td><code>&lt;aop:before&gt;</code></td><td>指定增强的方法在切入点之前执行</td></tr><tr><td>后置通知</td><td><code>&lt;aop:after-returning&gt;</code></td><td>指定增强的方法在切入点之后执行</td></tr><tr><td>环绕通知</td><td><code>&lt;aop:around&gt;</code></td><td>指定增强的方法在切入点之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td><code>&lt;aop:after-throwing&gt;</code></td><td>指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td><code>&lt;aop:after&gt;</code></td><td>无论增强方法执行是否有异常都会执行</td></tr></tbody></table><h1 id="切入点表达式提取"><a href="#切入点表达式提取" class="headerlink" title="切入点表达式提取"></a>切入点表达式提取</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        声明切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.vsneko.aop.Target.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-的-AOP-注解"><a href="#Spring-的-AOP-注解" class="headerlink" title="Spring 的 AOP 注解"></a>Spring 的 AOP 注解</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>将目标类和切面类配置 <code>@Component</code> 注解。</li><li>将切面类配置 <code>@Aspect</code> 注解，告诉 Spring 容器这是一个切面类。</li><li>将增强方法配置 <code>@Before、@afterReturning</code> 或其他注解，并传入切点表达式。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(void com.vsneko.aop.Target.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>applicationContext.xml</code> 中配置 组件扫描 和 AOP 自动注入。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.vsneko.aop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解的切入点表达式提取"><a href="#注解的切入点表达式提取" class="headerlink" title="注解的切入点表达式提取"></a>注解的切入点表达式提取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component()</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(&quot;MyAspect.pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.vsneko.aop.Target.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring JdbcTemplate 使用教程</title>
      <link href="article/10/"/>
      <url>article/10/</url>
      
        <content type="html"><![CDATA[<h1 id="JdbcTemplate-概述"><a href="#JdbcTemplate-概述" class="headerlink" title="JdbcTemplate 概述"></a>JdbcTemplate 概述</h1><p>它是 Spring 框架中提供的一个对象，是对原始繁琐的 jdbc api 对象的简单封装。 Spring 框架为我们提供了很多的操作模板类，例如: 操作关系型数据的 JdbcTemplate 和 HibernateTemplate，操作 nosql 数据库的 RedisTemplate，操作消息队列的 JmsTemplate 等等。</p><h1 id="JdbcTemplate-开发步骤"><a href="#JdbcTemplate-开发步骤" class="headerlink" title="JdbcTemplate 开发步骤"></a>JdbcTemplate 开发步骤</h1><h2 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h2><p>导入 <code>spring-jdbc</code> 和 <code>spring-tx</code> 的坐标。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建数据库实体类"><a href="#2-创建数据库实体类" class="headerlink" title="2. 创建数据库实体类"></a>2. 创建数据库实体类</h2><h2 id="3-创建数据源"><a href="#3-创建数据源" class="headerlink" title="3. 创建数据源"></a>3. 创建数据源</h2><h2 id="4-使用-JdbcTemplate"><a href="#4-使用-JdbcTemplate" class="headerlink" title="4. 使用 JdbcTemplate"></a>4. 使用 JdbcTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据源对象</span></span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">    <span class="comment">// 设置数据源对象</span></span><br><span class="line">    jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="keyword">int</span> rows = jdbcTemplate.update(<span class="string">&quot;insert into student values(?, ?)&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-配置-JdbcTemplate"><a href="#Spring-配置-JdbcTemplate" class="headerlink" title="Spring 配置 JdbcTemplate"></a>Spring 配置 JdbcTemplate</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    JdbcTemplate jdbcTemplate = (JdbcTemplate) app.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> rows = jdbcTemplate.update(<span class="string">&quot;insert into student values(?, ?)&quot;</span>, <span class="string">&quot;wek&quot;</span>, <span class="number">19</span>);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-JdbcTemplate-增删改查"><a href="#Spring-JdbcTemplate-增删改查" class="headerlink" title="Spring JdbcTemplate 增删改查"></a>Spring JdbcTemplate 增删改查</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateCRUDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(<span class="string">&quot;insert into student values(?, ?)&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(<span class="string">&quot;update student set age = 2211 where name = ?&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(<span class="string">&quot;delete from student where name = ?&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; students = jdbcTemplate.query(<span class="string">&quot;select * from student&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Student&gt;(Student.class));</span><br><span class="line">        System.out.println(students);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student tom = jdbcTemplate.queryForObject(<span class="string">&quot;select * from student where name = ?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Student&gt;(Student.class), <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(tom);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(1) from student&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 框架学习笔记</title>
      <link href="article/9/"/>
      <url>article/9/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-配置文件"><a href="#Spring-配置文件" class="headerlink" title="Spring 配置文件"></a>Spring 配置文件</h1><h2 id="Bean-标签配置"><a href="#Bean-标签配置" class="headerlink" title="Bean 标签配置"></a>Bean 标签配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>singleton：默认值，单例的。<ul><li>对象创建：当应用加载，创建容器时，对象被创建。</li><li>对象运行：只要容器在，对象一直活着。</li><li>对象销毁：当应用卸载，销毁容器时，对象被销毁。</li></ul></li><li>prototype：多例的。<ul><li>对象创建：使用对象时，创建新的对象实例。</li><li>对象运行：只要对象在使用中，就一直活着。</li><li>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收。</li></ul></li><li>request：WEB 项目中，Spring 创建一个 Bean 对象，将对象存入到 request 域中。</li><li>session：WEB 项目中，Spring 创建一个 Bean 对象，将对象存入到 session 域中。</li><li>global session：WEB 项目中，应用在 Portlet 环境，如果没有 Portlet 环境，那么 globalSession 相当于 session。</li></ul><h2 id="Bean-标签范围配置"><a href="#Bean-标签范围配置" class="headerlink" title="Bean 标签范围配置"></a>Bean 标签范围配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>init-method：指定类中的初始化方法名称。</li><li>destroy-method：指定类中销毁方法名称。</li></ul><h2 id="Bean-实例化的三种方式"><a href="#Bean-实例化的三种方式" class="headerlink" title="Bean 实例化的三种方式"></a>Bean 实例化的三种方式</h2><h3 id="无参构造方法实例化"><a href="#无参构造方法实例化" class="headerlink" title="无参构造方法实例化"></a>无参构造方法实例化</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工厂静态方法实例化"><a href="#工厂静态方法实例化" class="headerlink" title="工厂静态方法实例化"></a>工厂静态方法实例化</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工厂实例方法实例化"><a href="#工厂实例方法实例化" class="headerlink" title="工厂实例方法实例化"></a>工厂实例方法实例化</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.factory.DynamicFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-依赖注入方式"><a href="#Bean-依赖注入方式" class="headerlink" title="Bean 依赖注入方式"></a>Bean 依赖注入方式</h2><h3 id="Set-方法注入"><a href="#Set-方法注入" class="headerlink" title="Set 方法注入"></a>Set 方法注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入 P 命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用构造方法注入"><a href="#使用构造方法注入" class="headerlink" title="使用构造方法注入"></a>使用构造方法注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-依赖注入的数据类型"><a href="#Bean-依赖注入的数据类型" class="headerlink" title="Bean 依赖注入的数据类型"></a>Bean 依赖注入的数据类型</h2><h3 id="普通数据类型"><a href="#普通数据类型" class="headerlink" title="普通数据类型"></a>普通数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String addr;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line"><span class="keyword">private</span> Properties properties;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.vsneko.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>ppp1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>ppp2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入其他配置文件（分模块开发）"><a href="#引入其他配置文件（分模块开发）" class="headerlink" title="引入其他配置文件（分模块开发）"></a>引入其他配置文件（分模块开发）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-user.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ApplicationContext-的实现类"><a href="#ApplicationContext-的实现类" class="headerlink" title="ApplicationContext 的实现类"></a>ApplicationContext 的实现类</h2><h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h3><p>它是从类的根路径下加载配置文件，推荐使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h3><p>它是从磁盘路径下加载配置文件，配置文件可以在磁盘的任意位置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h3><p>当使用注解配置容器对象时，需要使用此类来创建 spring 容器，它用来读取注解。</p><h1 id="Spring-配置数据源"><a href="#Spring-配置数据源" class="headerlink" title="Spring 配置数据源"></a>Spring 配置数据源</h1><h2 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h2><ul><li>数据源（连接池）是提高程序性能的。</li><li>事先实例化数据源，初始化部分连接资源。</li><li>使用连接资源时从数据源中获取。</li><li>使用完毕后将连接资源归还给数据源。</li></ul><h2 id="数据源的手动创建"><a href="#数据源的手动创建" class="headerlink" title="数据源的手动创建"></a>数据源的手动创建</h2><ol><li>在 <code>pom.xml</code> 文件中导入 <code>c3p0</code> 和 <code>druid</code> 的坐标。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在方法中配置数据源</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">DruidPooledConnection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><ol start="3"><li>提取配置文本到配置文件 <code>jdbc.properties</code></li></ol><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>);</span><br><span class="line">rb.getString(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">rb.getString(<span class="string">&quot;jdbc.username&quot;</span>);</span><br><span class="line">rb.getString(<span class="string">&quot;jdbc.password&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Spring-配置数据源-1"><a href="#Spring-配置数据源-1" class="headerlink" title="Spring 配置数据源"></a>Spring 配置数据源</h2><p>可以将 DataSource 的创建权交由 Spring 容器去完成。</p><ol><li>在 pom.xml 文件中导入 <code>spring-context</code> 的坐标。</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>applicationContext.xml</code> 中配置注入</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">DataSource dataSource = (DataSource) app.getBean(DataSource.class);</span><br><span class="line"></span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h2 id="XML-加载配置文件"><a href="#XML-加载配置文件" class="headerlink" title="XML 加载配置文件"></a>XML 加载配置文件</h2><p><strong>需要引入 context 命名空间</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加载外部 properties 文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring-原始注解"><a href="#Spring-原始注解" class="headerlink" title="Spring 原始注解"></a>Spring 原始注解</h1><p>Spring 原始注解主要是替代 <code>&lt;Bean&gt;</code> 的配置</p><h2 id="注解列表"><a href="#注解列表" class="headerlink" title="注解列表"></a>注解列表</h2><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Component</td><td align="left">使用在类上，用于实例化 Bean</td></tr><tr><td align="left">@Controller</td><td align="left">使用在 Web 层类上，用于实例化 Bean</td></tr><tr><td align="left">@Service</td><td align="left">使用在 Service 层类上，用于实例化 Bean</td></tr><tr><td align="left">@Repository</td><td align="left">使用在 Dao 层类上，用于实例化 Bean</td></tr><tr><td align="left">@Autowired</td><td align="left">使用在字段上，用于根据类型依赖注入</td></tr><tr><td align="left">@Qualifier</td><td align="left">结合 @Autowired 一起使用，用于根据名称进行依赖注入</td></tr><tr><td align="left">@Resource</td><td align="left">结合 @Autowired + @Qualifier 一起使用，按照名称进行注入</td></tr><tr><td align="left">@Value</td><td align="left">注入普通属性</td></tr><tr><td align="left">@Scope</td><td align="left">标注 Bean 的作用范围</td></tr><tr><td align="left">@PostConstruct</td><td align="left">使用在方法上，标注该方法是 Bean 的初始化方法</td></tr><tr><td align="left">@PreDestroy</td><td align="left">使用在方法上，标注该方法是 Bean 的销毁方法</td></tr></tbody></table><h2 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h2><ol><li>在需要配置的Bean类上面加上注解 <code>@Component(&quot;id&quot;)</code> ( <code>@Repository, @Service, @Controller</code> )。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;save running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果要注入属性，可以用 <code>@Autowired</code> 和 <code>@Qualifier</code> 来注入。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><font color="red">要在 <code>applicationContext.xml</code> 配置文件中，配置组件扫描(需要引入Context包)。</font></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.vsneko&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解使用一些细节"><a href="#注解使用一些细节" class="headerlink" title="注解使用一些细节"></a>注解使用一些细节</h2><ul><li><code>@Repository, @Service, @Controller</code> 和 <code>@Component</code> 是一样的效果，只是具有语义化，增加可读性。</li><li>对于属性，如果只标记 <code>@Autowired</code> ，也是可以注入的，这个时候 Spring 会根据属性的类型来匹配 Spring 容器中的 Bean 进行注入。</li><li>如果标记 <code>@Autowired</code> 的属性类型在容器中有多个 Bean，则需要用到 <code>@Qualifier</code> 来标识注入的 Bean 的 id，<code>@Qualifier</code> 必须配合 <code>@Autowired</code>  来使用。</li><li>如果同时使用 <code>@Autowired</code> 和 <code>@Qualifier</code> ，则可以使用 <code>@Resource</code> 来代替。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注入普通属性值"><a href="#注入普通属性值" class="headerlink" title="注入普通属性值"></a>注入普通属性值</h2><p>使用 <code>@Value</code> 注解可以注入普通属性值，可以使用 <code>$&#123;key&#125;</code> 来注入配置项的值。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载外部 properties 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;abc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解标记-Bean-的作用范围"><a href="#注解标记-Bean-的作用范围" class="headerlink" title="注解标记 Bean 的作用范围"></a>注解标记 Bean 的作用范围</h2><p>使用 <code>@Scope</code> 注解可以标记 Bean 的作用范围 (单例: singleton, 多例: prototype)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解标记-Bean-的创建和销毁方法"><a href="#注解标记-Bean-的创建和销毁方法" class="headerlink" title="注解标记 Bean 的创建和销毁方法"></a>注解标记 Bean 的创建和销毁方法</h2><p>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解可以标记 Bean 的创建和销毁方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-新注解"><a href="#Spring-新注解" class="headerlink" title="Spring 新注解"></a>Spring 新注解</h1><p>以下配置无法使用原始注解来代替，这时需要使用新注解。有了新注解，可以完全替代配置文件。</p><ul><li>非自定义的 Bean 配置</li><li>加载 properties 文件的配置</li><li>组件扫描的配置</li><li>引入其他文件的配置</li></ul><h2 id="新注解列表"><a href="#新注解列表" class="headerlink" title="新注解列表"></a>新注解列表</h2><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Configuration</td><td align="left">用于指定当前类是一个 Spring 配置类，创建容器时会从该类上加载注解</td></tr><tr><td align="left">@ComponentScan</td><td align="left">用于指定 Spring 初始化容器时要扫描的包。</td></tr><tr><td align="left">@Bean</td><td align="left">用在方法上，标注将该方法的返回值存储在 Spring 容器中。</td></tr><tr><td align="left">@PropertySource</td><td align="left">用于加载 properties 文件中的配置</td></tr><tr><td align="left">@Import</td><td align="left">用于导入其他配置类</td></tr></tbody></table><h2 id="新注解的使用"><a href="#新注解的使用" class="headerlink" title="新注解的使用"></a>新注解的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标志该类是 Spring 的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// &lt;context:component-scan base-package=&quot;com.vsneko&quot;&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.vsneko&quot;)</span></span><br><span class="line"><span class="comment">// 导入其他配置类</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring 会将当前方法的返回值以指定名称存储到 Spring 容器当中</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-集成-Junit"><a href="#Spring-集成-Junit" class="headerlink" title="Spring 集成 Junit"></a>Spring 集成 Junit</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>导入 Spring 集成 Junit 的坐标</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>@Runwith</code> 注解来替换原来的运行期</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <code>@ContextConfiguration</code> 指定配置文件或配置类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用 <code>@Autowired</code> 注入需要测试的对象</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建测试方法进行测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-ContextLoaderListener"><a href="#Spring-ContextLoaderListener" class="headerlink" title="Spring ContextLoaderListener"></a>Spring ContextLoaderListener</h1><h2 id="导入-spring-web-坐标"><a href="#导入-spring-web-坐标" class="headerlink" title="导入 spring-web 坐标"></a>导入 spring-web 坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置上下文对象"><a href="#配置上下文对象" class="headerlink" title="配置上下文对象"></a>配置上下文对象</h2><p>使用 WebApplicationContextUtils 来获得应用上下文对象 ApplicationContext</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">    WebApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">    UserService bean = app.getBean(UserService.class);</span><br><span class="line">    bean.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网件 WNDR4300 路由器折腾日记</title>
      <link href="article/8/"/>
      <url>article/8/</url>
      
        <content type="html"><![CDATA[<p>很早以前就知道 SSR 这种东西，是可以放在路由器上运行的，这样就可以让每个连接路由器网络的设备直接翻墙，省去了每个设备都要连接的麻烦，而且解决了部分设备没有翻墙客户端的问题(Switch)。</p><p>最近在油管上刷视频的时候，偶然看到 <code>虚拟机安装OpenWrt</code> 相关的视频，出于爱折腾的性心理，就自己动手试了一下。</p><p>几个小时的折腾过后，终于第一次用上了 OpenWrt 系统。</p><p>管理界面很漂亮，功能插件也多。这也太好用了吧！我将 SSR 节点导入 ShadowSockR Plus+ 插件中并配置，电脑可以正常扶墙，移动端修改网关之后也可以直接扶墙了，简直一颗赛艇。</p><p>两天之后，心态逐渐平稳了下来，发现还是有一些问题的。比如电脑必须要保持开机，比如每个设备都必须指定网关为电脑虚拟机的IP，使用起来还是有点麻烦的。</p><p>然后我就了解到了，可以直接将路由器的系统刷成 OpenWrt 系统，这样就可以解决上面的问题了。</p><p>经过一整天的了解和筛选，我最终选择了 <code>网件 WNDR4300</code>。从万能的某宝下单，两天之后就拿到了货。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/wndr4300.jpg" alt="网件 WNDR4300 路由器"></p><p>由于在这方面还是小白，就让卖家直接帮我刷了 <code>明月永在</code> 的 OpenWrt 系统。</p><p>但是当我登入路由器后台时，发现后台管理界面实在是有年代感，于是我就准备自己折腾，刷一个好看点的后台系统。</p><p>又折腾了一整天，算是了解了 <code>网件 WNDR4300</code> 的基本的刷机流程：</p><ol><li><p>进入路由器恢复模式：先关闭路由器电源，然后用牙签插入小孔，然后按电源键开机，等电源指示灯从最开始的橙黄闪烁，变成绿灯，再变成绿灯闪烁，就可以松开了。</p></li><li><p>电脑连接并配置：电脑网线连接路由器的 LAN 口，然后修改电脑的IP为 <code>192.168.1.X</code>，子网掩码 <code>255.255.255.0</code>，打开 CMD 开始 ping <code>192.168.1.1</code>，等什么时候能 ping 通，说明连接成功。</p></li><li><p>刷机：首先电脑要开启 <code>TFTP</code> 功能，在 Windows 的 <code>启动或关闭Windows功能</code> 中可以开启。然后打开 CMD，执行 <code>tftp -i 192.168.1.1 XXX.img</code> 等待完成即刷入成功。</p></li></ol><p>我最后选择了 AlbertZhan 大佬的固件，界面很漂亮，插件也很多。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/wndr4300_sys1.png" alt="路由器 后台界面"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/wndr4300_sys2.png" alt="路由器 后台界面 2"></p><p>当然，不仅是要界面漂亮，我买这个路由器的主要目的就是为了翻墙。</p><p>配置好节点并启动之后，打开浏览器，Google、YouTube，正常访问，终于折腾完了。</p><hr><p>然而，又发现了新的问题。</p><p>同一个节点，我用电脑虚拟机装 OpenWrt 系统，或者直接使用翻墙客户端，速度都是可以跑满带宽的。</p><p>但是我使用这个路由器的时候，带宽只能跑到 4 Mbps 的样子。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/youtube_speed1.png" alt="YouTube 速度测试"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/youtube_speed2.png" alt="YouTube 速度测试 2"></p><p>经过了解，发现翻墙速度是比较依赖于 CPU 性能的，而普通的路由器一般不需要很高的 CPU，所以速度很低。</p><p>对翻墙网速有要求的话，要购买软路由才能跑满宽带的样子~</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> OpenWrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 2016 年学 JavaScript 是一种什么样的体验？</title>
      <link href="article/7/"/>
      <url>article/7/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本篇文章转载自：<a href="https://zhuanlan.zhihu.com/p/22782487">https://zhuanlan.zhihu.com/p/22782487</a></p></div><blockquote><p>注：原文是英文，本文是我翻译的。有人把我翻译的内容原文照抄，放到他自己的专栏，搞得有人问我是不是我抄袭了……请支持我的劳动成果，花了两个小时翻译的，谢谢。转载请注明译者为方应杭。</p></blockquote><hr><blockquote><p>嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p></blockquote><p>准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p><blockquote><p>厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p></blockquote><p>可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p><blockquote><p>哦，好吧，React 是什么？</p></blockquote><p>React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p><blockquote><p>听起来确实不错。我能用 React 展示服务器传来的数据吗？</p></blockquote><p>当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p><blockquote><p>额，等下，为什么是两个库？</p></blockquote><p>React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p><blockquote><p>JSX？JSX 是什么？</p></blockquote><p>JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p><blockquote><p>为什么不用 HTML 了……？</p></blockquote><p>现在可是 2016 年啊，没有直接写 HTML 的。</p><blockquote><p>对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p></blockquote><p>不行哦。你需要添加 Babel，然后才能用 React。</p><blockquote><p>Babel 是另一个库？</p></blockquote><p>嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p><blockquote><p>ES5 是啥？ES2016+ 又是啥？我有点晕。</p></blockquote><p>ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p><blockquote><p>ECMAScript 是啥……</p></blockquote><p>你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p><blockquote><p>7 个版本？那 ES5 和 ES2016+ 是？</p></blockquote><p>分别是第 5 个版本和第 7 个版本。</p><blockquote><p>诶，那第六个版本呢？</p></blockquote><p>你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p><blockquote><p>对哦。为什么不用 ES6 呢？</p></blockquote><p>好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p><blockquote><p>不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p></blockquote><p>大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p><blockquote><p>好吧，所以我现在要加载三个库才能获取并展示数据。</p></blockquote><p>对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p><blockquote><p>哦，什么是模块管理器……</p></blockquote><p>不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p><blockquote><p>好……吧，什么是 AMD 和 CommonJS？</p></blockquote><p>是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p><blockquote><p>听起来很有道理。不过，什么是 Browserify？</p></blockquote><p>是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p><blockquote><p>npm 仓库是什么……</p></blockquote><p>是一个公开的仓库，用于放置可依赖的模块。</p><blockquote><p>就像一个 CDN 么？</p></blockquote><p>不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p><blockquote><p>听起来像是 Bower！</p></blockquote><p>是的，不过现在是 2016 年了，没有人用 Bower 了……</p><blockquote><p>好吧，我知道了，所以我应该用 npm 来安装依赖。</p></blockquote><p>对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p><blockquote><p>嗯，Angular 也可以。</p></blockquote><p>Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p><blockquote><p>还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p></blockquote><p>是的。</p><blockquote><p>这么做看起来有点过于复杂啊。</p></blockquote><p>确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p><blockquote><p>你在说什么……</p></blockquote><p>任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p><blockquote><p>我以为只有 C/C++ 项目才会用 Makefiles。</p></blockquote><p>是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p><blockquote><p>唉，你刚才说的 Webpack 是什么？</p></blockquote><p>另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p><blockquote><p>哦，好吧，为什么 Webpack 是加强版？</p></blockquote><p>额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p><blockquote><p>这都是哪跟哪啊，我都被绕晕了。</p></blockquote><p>大家都被绕晕了，不过等 SystemJS 出来了就好了。</p><blockquote><p>天呐，又一个 JS 库，这是什么鬼？</p></blockquote><p>呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p><blockquote><p>等下，刚才不是说应该把所有依赖打包成一个文件吗？</p></blockquote><p>话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p><blockquote><p>那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p></blockquote><p>不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p><blockquote><p>唉，这么鹾？</p></blockquote><p>是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p><blockquote><p>我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p></blockquote><p>我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p><blockquote><p>Typescript？我们不是在说 JavaScript 吗？！</p></blockquote><p>Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p><blockquote><p>ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p></blockquote><p>是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p><blockquote><p>显然 Typescript 可以做到。</p></blockquote><p>Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p><blockquote><p>唉，Flow 是？</p></blockquote><p>是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p><blockquote><p>OCaml？函数式编程？</p></blockquote><p>如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p><blockquote><p>不知道你在说什么。</p></blockquote><p>一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p><blockquote><p>等下，我大学里学过面向对象编程，当时我觉得它还不错。</p></blockquote><p>Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p><blockquote><p>你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p></blockquote><p>不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p><blockquote><p>谁？</p></blockquote><p>David Chambers，大神一个。blablabla</p><blockquote><p>我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。回到 React 吧，用 React 我怎么从服务器获取数据？</p></blockquote><p>额，React 没有提供这个功能，你只能用 React 展示数据。</p><blockquote><p>服了啊。那我怎么获取数据？</p></blockquote><p>你用 Fetch API 就可以了。</p><blockquote><p>啥玩意？这个 API 的名字很烂啊。</p></blockquote><p>我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p><blockquote><p>哦，那不就是 AJAX。</p></blockquote><p>AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p><blockquote><p>回调地狱？</p></blockquote><p>是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p><blockquote><p>好吧。Promise 解决了这个问题么？</p></blockquote><p>是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p><blockquote><p>Fetch 也能做到吗？</p></blockquote><p>是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p><blockquote><p>天呐我到底需要多少个库？</p></blockquote><p>这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p><blockquote><p>你刚才说的几个库都是干什么的？</p></blockquote><p>这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p><blockquote><p>好像 jQuery 的 ajax 方法做的是同样的事吧……</p></blockquote><p>从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p><blockquote><p>这是你第三次说 await 了，那是什么东西？</p></blockquote><p>await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p><blockquote><p>听起来像是疯了。</p></blockquote><p>没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p><blockquote><p>啥玩意？Typescript 不支持 await？</p></blockquote><p>下个版本就支持了。</p><blockquote><p>我已经无话可说了。</p></blockquote><p>你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p><blockquote><p>看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p></blockquote><p>你的网页需要处理状态变更吗？</p><blockquote><p>唔，不用吧。我只是想展示数据。</p></blockquote><p>那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p><blockquote><p>你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p></blockquote><p>这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p><blockquote><p>你逗我呢？</p></blockquote><p>我只是告诉你你可以用什么技术。</p><blockquote><p>别说了，真的。</p></blockquote><p>我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p><blockquote><p>我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p></blockquote><p>有很多，你用过哪一个？</p><blockquote><p>额，太久没用了，不记得了。</p></blockquote><p>jTemplates、jQote 还是 PURE？</p><blockquote><p>额，不记得，还有别的么？</p></blockquote><p>Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p><blockquote><p>还有吗？</p></blockquote><p>PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p><blockquote><p>有点像。有哪些跟最后一个比较像的？</p></blockquote><p>Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p><blockquote><p>额，也许是再新一点的库？</p></blockquote><p>Jade? DustJS?</p><blockquote><p>没用过</p></blockquote><p>DotJS? EJS?</p><blockquote><p>没用过。</p></blockquote><p>Nunjucks? ECT?</p><blockquote><p>没用过。记不起来了，要是你的话，你用哪个？</p></blockquote><p>我应该会用 ES6 原生的模板字符串</p><blockquote><p>我猜猜，只有 ES6 支持。</p></blockquote><p>对的。</p><blockquote><p>需要用 Babel</p></blockquote><p>对的。</p><blockquote><p>需要用 npm 安装</p></blockquote><p>对的。</p><blockquote><p>需要用 Browserify 或者 Webpack，或者 SystemJS</p></blockquote><p>对的。</p><blockquote><p>如果没用 Webpack 的话，我还需要一个任务管理工具。</p></blockquote><p>对的。</p><blockquote><p>但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p></blockquote><p>对的。</p><blockquote><p>如果我要用 await，那我就必须用 Babel 转译。</p></blockquote><p>对的。</p><blockquote><p>然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p></blockquote><p>嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p><blockquote><p>你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p></blockquote><p>没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p><blockquote><p>我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p></blockquote><p>我理解你。我建议你去 Python 社区。</p><blockquote><p>为什么？</p></blockquote><p>听说过 Python 3 吗？</p><p>完。</p><p><em>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生产环境中了！</em></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算交换两个变量的值</title>
      <link href="article/6/"/>
      <url>article/6/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这种方法不需要申请第三个变量，缺点是只能交换整数变量。</p><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">20</span>;</span><br><span class="line">System.out.println(v1 + <span class="string">&quot; &quot;</span> + v2);    <span class="comment">//输出 10 20</span></span><br><span class="line"></span><br><span class="line">v1 = v1 ^ v2;</span><br><span class="line">v2 = v1 ^ v2;</span><br><span class="line">v1 = v1 ^ v2;</span><br><span class="line">System.out.println(v1 + <span class="string">&quot; &quot;</span> + v2);    <span class="comment">//输出 20 10</span></span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="comment">//交换位置</span></span><br><span class="line">            arr[j] = arr[j] ^ arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j] ^ arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j] = arr[j] ^ arr[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果  (2 3 4 5 6 )</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 系统常用脚本</title>
      <link href="article/5/"/>
      <url>article/5/</url>
      
        <content type="html"><![CDATA[<h1 id="小飞机一键脚本"><a href="#小飞机一键脚本" class="headerlink" title="小飞机一键脚本"></a>小飞机一键脚本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh</span><br><span class="line">sh ssr.sh</span><br></pre></td></tr></table></figure><h1 id="BBR-一键脚本"><a href="#BBR-一键脚本" class="headerlink" title="BBR 一键脚本"></a>BBR 一键脚本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Centos 7 </tag>
            
            <tag> SSR </tag>
            
            <tag> BBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR 存在时无法打开 Microsoft Store</title>
      <link href="article/4/"/>
      <url>article/4/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本篇文章转载自：<a href="http://blog.iyzyi.com/index.php/archives/988/">http://blog.iyzyi.com/index.php/archives/988/</a></p></div><p>今天突然发现打不开 Microsoft Store，一直卡在请求界面。</p><p>因为之前遇到过几次打不开 Microsoft Store 的情况，所以知道大概率又是代理的问题。查了下资料，终于彻底（存疑）解决了这个问题。</p><a id="more"></a><h2 id="连接失败的原因"><a href="#连接失败的原因" class="headerlink" title="连接失败的原因"></a>连接失败的原因</h2><p>（具体原因过两天详细的研究一下，以下可能有谬误。）</p><p>UWP有沙箱的安全机制，无法连接到 <code>127.0.0.1</code>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>为所有UWP应用单独设置代理。</p><p>以管理员身份启动 <code>PowerShell</code>（Win+X后按A）后运行下列命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$f</span> <span class="keyword">in</span> <span class="built_in">Get-ChildItem</span> <span class="variable">$env:LOCALAPPDATA</span>\Packages) &#123;CheckNetIsolation.exe LoopbackExempt <span class="literal">-a</span> <span class="string">&quot;-n=<span class="variable">$</span>(<span class="variable">$f</span>.Name)&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>参考</strong><br><a href="https://github.com/shadowsocks/shadowsocks-windows/issues/897#issuecomment-413400908">是不是现在的影梭还不可以支持win10应用的翻墙？</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
            <tag> 转载 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 显示 WWW 和 HTTPS 方法</title>
      <link href="article/3/"/>
      <url>article/3/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本篇文章转载自：<a href="https://www.cnblogs.com/sstfy/p/12027587.html">https://www.cnblogs.com/sstfy/p/12027587.html</a></p></div><h2 id="Chrome-78-以前的老版本"><a href="#Chrome-78-以前的老版本" class="headerlink" title="Chrome 78 以前的老版本"></a>Chrome 78 以前的老版本</h2><p>将下面选项改成 <code>disable</code> 就行了。</p><pre><code>chrome://flags/#omnibox-ui-hide-steady-state-url-schemechrome://flags/#omnibox-ui-hide-steady-state-url-trivial-subdomains</code></pre><h2 id="Chrome-78-版本"><a href="#Chrome-78-版本" class="headerlink" title="Chrome 78 版本"></a>Chrome 78 版本</h2><p>Chrome 78 版本没有以上两项，可以在 <code>chrome://flags/</code> 页面开启 console，执行下面的代码来显示 www 和 https。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">&#x27;omnibox-ui-hide-steady-state-url-path-query-and-ref&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;omnibox-ui-hide-steady-state-url-scheme&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;omnibox-ui-hide-steady-state-url-trivial-subdomains&#x27;</span></span><br><span class="line">].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">chrome.send(<span class="string">&#x27;enableExperimentalFeature&#x27;</span>, [f + <span class="string">&#x27;disable&#x27;</span>, <span class="string">&#x27;true&#x27;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一行 disable 可换成 enable 或 default</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/lyotmq.png"></p><h2 id="Chrome-79-以上的新版本"><a href="#Chrome-79-以上的新版本" class="headerlink" title="Chrome 79 以上的新版本"></a>Chrome 79 以上的新版本</h2><p>越来越BT，上面的都不行了，实践了一些还是 GG。</p><p>目前只发现通过安装 <code>Suspicious Site Reporter</code> 插件来显示。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/shironekoa3/static/images/posts/b0q15u.png"></p><h2 id="关闭标签预览及缩略图预览"><a href="#关闭标签预览及缩略图预览" class="headerlink" title="关闭标签预览及缩略图预览"></a>关闭标签预览及缩略图预览</h2><p>将下面选项改成 <code>disable</code> 即可。</p><pre><code>chrome://flags/#tab-hover-cardschrome://flags/#tab-hover-card-images</code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Chrome </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慢慢的 就没有了 就像从未存在过</title>
      <link href="article/2/"/>
      <url>article/2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。<br>天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。<br>最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p></blockquote><p>作者: 小海</p><p>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。</p><p>那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？</p><p>今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。</p><p>没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？</p><p>多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。</p><p>然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。</p><p>多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。</p><p>然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。</p><p>多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。</p><p>哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。</p><p>可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。</p><p>我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。</p><p>对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。</p><p>可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。</p><p>没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。</p><p>没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。</p><p>没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。</p><p>没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的 “根据相关法律法规，相关搜索结果不予显示 ”。时间长了，你想，反正知道了也没什么用，不如不看了。</p><p>慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。</p><p>接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。</p><p>游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为 “报备问题 ”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。</p><p>你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。</p><p>一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。</p><p>天黑了，那么睡觉吧，但愿长醉不复醒，卧槽泥马勒戈壁。</p><p>最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="article/1/"/>
      <url>article/1/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
